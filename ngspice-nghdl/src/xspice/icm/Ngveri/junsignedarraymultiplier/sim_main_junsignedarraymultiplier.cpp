/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vjunsignedarraymultiplier.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_A[1024];
        extern "C" int port_A;
        extern "C" int temp_B[1024];
        extern "C" int port_B;
        extern "C" int temp_PRODUCT[1024];
        extern "C" int port_PRODUCT;
        extern "C" int foojunsignedarraymultiplier(int,int);
        
        void int2arrjunsignedarraymultiplier(int  num, int array[], int n)
        {   
            for (int i = 0; i < n && num>=0; i++) 
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intjunsignedarraymultiplier(int array[],int n)
        {   
            int i,k=0;
            for (i = 0; i < n; i++) 
                k = 2 * k + array[i];
            return k;
        }
        
        int foojunsignedarraymultiplier(int init,int count) 
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vjunsignedarraymultiplier* junsignedarraymultiplier[1024];
            count--;
            if (init==0) 
            {
                junsignedarraymultiplier[count]=new Vjunsignedarraymultiplier{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============junsignedarraymultiplier : New Iteration===========");
                printf("\nInside foo before eval.....\n");
				printf("A=%d\n", junsignedarraymultiplier[count] ->A);
				printf("B=%d\n", junsignedarraymultiplier[count] ->B);
				printf("PRODUCT=%d\n", junsignedarraymultiplier[count] ->PRODUCT);
				junsignedarraymultiplier[count]->A = arr2intjunsignedarraymultiplier(temp_A, port_A);
				junsignedarraymultiplier[count]->B = arr2intjunsignedarraymultiplier(temp_B, port_B);
				junsignedarraymultiplier[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("A=%d\n", junsignedarraymultiplier[count] ->A);
				printf("B=%d\n", junsignedarraymultiplier[count] ->B);
				printf("PRODUCT=%d\n", junsignedarraymultiplier[count] ->PRODUCT);
				int2arrjunsignedarraymultiplier(junsignedarraymultiplier[count] -> PRODUCT, temp_PRODUCT, port_PRODUCT);

            }
            return 0;
        }