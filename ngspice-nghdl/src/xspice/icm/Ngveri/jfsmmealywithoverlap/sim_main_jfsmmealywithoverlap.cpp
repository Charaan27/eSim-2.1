/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vjfsmmealywithoverlap.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_clock[1024];
        extern "C" int port_clock;
        extern "C" int temp_reset[1024];
        extern "C" int port_reset;
        extern "C" int temp_datain[1024];
        extern "C" int port_datain;
        extern "C" int temp_dataout[1024];
        extern "C" int port_dataout;
        extern "C" int foojfsmmealywithoverlap(int,int);
        
        void int2arrjfsmmealywithoverlap(int  num, int array[], int n)
        {   
            for (int i = 0; i < n && num>=0; i++) 
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intjfsmmealywithoverlap(int array[],int n)
        {   
            int i,k=0;
            for (i = 0; i < n; i++) 
                k = 2 * k + array[i];
            return k;
        }
        
        int foojfsmmealywithoverlap(int init,int count) 
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vjfsmmealywithoverlap* jfsmmealywithoverlap[1024];
            count--;
            if (init==0) 
            {
                jfsmmealywithoverlap[count]=new Vjfsmmealywithoverlap{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============jfsmmealywithoverlap : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("clock=%d\n", jfsmmealywithoverlap[count] ->clock);
				printf("reset=%d\n", jfsmmealywithoverlap[count] ->reset);
				printf("datain=%d\n", jfsmmealywithoverlap[count] ->datain);
				printf("dataout=%d\n", jfsmmealywithoverlap[count] ->dataout);
				jfsmmealywithoverlap[count]->clock = arr2intjfsmmealywithoverlap(temp_clock, port_clock);
				jfsmmealywithoverlap[count]->reset = arr2intjfsmmealywithoverlap(temp_reset, port_reset);
				jfsmmealywithoverlap[count]->datain = arr2intjfsmmealywithoverlap(temp_datain, port_datain);
				jfsmmealywithoverlap[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("clock=%d\n", jfsmmealywithoverlap[count] ->clock);
				printf("reset=%d\n", jfsmmealywithoverlap[count] ->reset);
				printf("datain=%d\n", jfsmmealywithoverlap[count] ->datain);
				printf("dataout=%d\n", jfsmmealywithoverlap[count] ->dataout);
				int2arrjfsmmealywithoverlap(jfsmmealywithoverlap[count] -> dataout, temp_dataout, port_dataout);

            }
            return 0;
        }