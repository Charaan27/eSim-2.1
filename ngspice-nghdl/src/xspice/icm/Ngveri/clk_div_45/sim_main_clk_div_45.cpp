/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vclk_div_45.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_clk_in[1024];
        extern "C" int port_clk_in;
        extern "C" int temp_enable[1024];
        extern "C" int port_enable;
        extern "C" int temp_clk_out[1024];
        extern "C" int port_clk_out;
        extern "C" int fooclk_div_45(int,int);
        
        void int2arrclk_div_45(int  num, int array[], int n)
        {   
            for (int i = 0; i < n && num>=0; i++) 
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intclk_div_45(int array[],int n)
        {   
            int i,k=0;
            for (i = 0; i < n; i++) 
                k = 2 * k + array[i];
            return k;
        }
        
        int fooclk_div_45(int init,int count) 
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vclk_div_45* clk_div_45[1024];
            count--;
            if (init==0) 
            {
                clk_div_45[count]=new Vclk_div_45{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============clk_div_45 : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("clk_in=%d\n", clk_div_45[count] ->clk_in);
				printf("enable=%d\n", clk_div_45[count] ->enable);
				printf("clk_out=%d\n", clk_div_45[count] ->clk_out);
				clk_div_45[count]->clk_in = arr2intclk_div_45(temp_clk_in, port_clk_in);
				clk_div_45[count]->enable = arr2intclk_div_45(temp_enable, port_enable);
				clk_div_45[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("clk_in=%d\n", clk_div_45[count] ->clk_in);
				printf("enable=%d\n", clk_div_45[count] ->enable);
				printf("clk_out=%d\n", clk_div_45[count] ->clk_out);
				int2arrclk_div_45(clk_div_45[count] -> clk_out, temp_clk_out, port_clk_out);

            }
            return 0;
        }