/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vdiff_io_top.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_rx_in[1024];
        extern "C" int port_rx_in;
        extern "C" int temp_rx_inclock[1024];
        extern "C" int port_rx_inclock;
        extern "C" int temp_rx_data_align[1024];
        extern "C" int port_rx_data_align;
        extern "C" int temp_tx_out[1024];
        extern "C" int port_tx_out;
        extern "C" int temp_rx_locked[1024];
        extern "C" int port_rx_locked;
        extern "C" int temp_tx_outclock[1024];
        extern "C" int port_tx_outclock;
        extern "C" int foodiff_io_top(int,int);
        
        void int2arrdiff_io_top(int  num, int array[], int n)
        {   
            for (int i = 0; i < n && num>=0; i++) 
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intdiff_io_top(int array[],int n)
        {   
            int i,k=0;
            for (i = 0; i < n; i++) 
                k = 2 * k + array[i];
            return k;
        }
        
        int foodiff_io_top(int init,int count) 
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vdiff_io_top* diff_io_top[1024];
            count--;
            if (init==0) 
            {
                diff_io_top[count]=new Vdiff_io_top{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============diff_io_top : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("rx_in=%d\n", diff_io_top[count] ->rx_in);
				printf("rx_inclock=%d\n", diff_io_top[count] ->rx_inclock);
				printf("rx_data_align=%d\n", diff_io_top[count] ->rx_data_align);
				printf("tx_out=%d\n", diff_io_top[count] ->tx_out);
				printf("rx_locked=%d\n", diff_io_top[count] ->rx_locked);
				printf("tx_outclock=%d\n", diff_io_top[count] ->tx_outclock);
				diff_io_top[count]->rx_in = arr2intdiff_io_top(temp_rx_in, port_rx_in);
				diff_io_top[count]->rx_inclock = arr2intdiff_io_top(temp_rx_inclock, port_rx_inclock);
				diff_io_top[count]->rx_data_align = arr2intdiff_io_top(temp_rx_data_align, port_rx_data_align);
				diff_io_top[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("rx_in=%d\n", diff_io_top[count] ->rx_in);
				printf("rx_inclock=%d\n", diff_io_top[count] ->rx_inclock);
				printf("rx_data_align=%d\n", diff_io_top[count] ->rx_data_align);
				printf("tx_out=%d\n", diff_io_top[count] ->tx_out);
				printf("rx_locked=%d\n", diff_io_top[count] ->rx_locked);
				printf("tx_outclock=%d\n", diff_io_top[count] ->tx_outclock);
				int2arrdiff_io_top(diff_io_top[count] -> tx_out, temp_tx_out, port_tx_out);
				int2arrdiff_io_top(diff_io_top[count] -> rx_locked, temp_rx_locked, port_rx_locked);
				int2arrdiff_io_top(diff_io_top[count] -> tx_outclock, temp_tx_outclock, port_tx_outclock);

            }
            return 0;
        }