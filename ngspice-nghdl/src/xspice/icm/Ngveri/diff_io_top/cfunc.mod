/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

                
        #include <stdio.h>
        #include <math.h>
        #include <string.h>
        #include "sim_main_diff_io_top.h"

        
void cm_diff_io_top(ARGS) 
{
	Digital_State_t *_op_tx_out, *_op_tx_out_old;
	Digital_State_t *_op_rx_locked, *_op_rx_locked_old;
	Digital_State_t *_op_tx_outclock, *_op_tx_outclock_old;

    static int inst_count=0;
    int count=0;
        
    if(INIT)
    {   
        inst_count++;
        PARAM(instance_id)=inst_count;
        foodiff_io_top(0,inst_count);
        /* Allocate storage for output ports and set the load for input ports */

        
        port_rx_in=PORT_SIZE(rx_in);

        port_rx_inclock=PORT_SIZE(rx_inclock);

        port_rx_data_align=PORT_SIZE(rx_data_align);

        port_tx_out=PORT_SIZE(tx_out);

        port_rx_locked=PORT_SIZE(rx_locked);

        port_tx_outclock=PORT_SIZE(tx_outclock);
		cm_event_alloc(0,2*sizeof(Digital_State_t));
		cm_event_alloc(1,1*sizeof(Digital_State_t));
		cm_event_alloc(2,1*sizeof(Digital_State_t));
		/* set the load for input ports. */
		int Ii;
		for(Ii=0;Ii<PORT_SIZE(rx_in);Ii++)
		{
			LOAD(rx_in[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(rx_inclock);Ii++)
		{
			LOAD(rx_inclock[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(rx_data_align);Ii++)
		{
			LOAD(rx_data_align[Ii])=PARAM(input_load); 
		}

		/*Retrieve Storage for output*/
		_op_tx_out = _op_tx_out_old = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_rx_locked = _op_rx_locked_old = (Digital_State_t *) cm_event_get_ptr(1,0);
		_op_tx_outclock = _op_tx_outclock_old = (Digital_State_t *) cm_event_get_ptr(2,0);


	}
	else
	{
		_op_tx_out = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_tx_out_old = (Digital_State_t *) cm_event_get_ptr(0,1);
		_op_rx_locked = (Digital_State_t *) cm_event_get_ptr(1,1);
		_op_rx_locked_old = (Digital_State_t *) cm_event_get_ptr(1,2);
		_op_tx_outclock = (Digital_State_t *) cm_event_get_ptr(2,2);
		_op_tx_outclock_old = (Digital_State_t *) cm_event_get_ptr(2,3);
	}

	//Formating data for sending it to client
	int Ii;
	count=(int)PARAM(instance_id);

    for(Ii=0;Ii<PORT_SIZE(rx_in);Ii++)
    {
        if( INPUT_STATE(rx_in[Ii])==ZERO )
        {
            temp_rx_in[Ii]=0;            }
        else
        {
            temp_rx_in[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(rx_inclock);Ii++)
    {
        if( INPUT_STATE(rx_inclock[Ii])==ZERO )
        {
            temp_rx_inclock[Ii]=0;            }
        else
        {
            temp_rx_inclock[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(rx_data_align);Ii++)
    {
        if( INPUT_STATE(rx_data_align[Ii])==ZERO )
        {
            temp_rx_data_align[Ii]=0;            }
        else
        {
            temp_rx_data_align[Ii]=1;
        }
            }
	foodiff_io_top(1,count);

	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(tx_out);Ii++)
    {
        if(temp_tx_out[Ii]==0)
        {
            _op_tx_out[Ii]=ZERO;
            }
        else if(temp_tx_out[Ii]==1)
        {
            _op_tx_out[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(tx_out[Ii]) = _op_tx_out[Ii];
            }
        else if(_op_tx_out[Ii] != _op_tx_out_old[Ii])
        {
            OUTPUT_STATE(tx_out[Ii]) = _op_tx_out[Ii];
            OUTPUT_DELAY(tx_out[Ii]) = ((_op_tx_out[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(tx_out[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(tx_out[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(rx_locked);Ii++)
    {
        if(temp_rx_locked[Ii]==0)
        {
            _op_rx_locked[Ii]=ZERO;
            }
        else if(temp_rx_locked[Ii]==1)
        {
            _op_rx_locked[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(rx_locked[Ii]) = _op_rx_locked[Ii];
            }
        else if(_op_rx_locked[Ii] != _op_rx_locked_old[Ii])
        {
            OUTPUT_STATE(rx_locked[Ii]) = _op_rx_locked[Ii];
            OUTPUT_DELAY(rx_locked[Ii]) = ((_op_rx_locked[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(rx_locked[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(rx_locked[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(tx_outclock);Ii++)
    {
        if(temp_tx_outclock[Ii]==0)
        {
            _op_tx_outclock[Ii]=ZERO;
            }
        else if(temp_tx_outclock[Ii]==1)
        {
            _op_tx_outclock[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(tx_outclock[Ii]) = _op_tx_outclock[Ii];
            }
        else if(_op_tx_outclock[Ii] != _op_tx_outclock_old[Ii])
        {
            OUTPUT_STATE(tx_outclock[Ii]) = _op_tx_outclock[Ii];
            OUTPUT_DELAY(tx_outclock[Ii]) = ((_op_tx_outclock[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(tx_outclock[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(tx_outclock[Ii]) = STRONG;
    }

}