/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

                
        #include <stdio.h>
        #include <math.h>
        #include <string.h>
        #include "sim_main_ddr2_controller.h"

        
void cm_ddr2_controller(ARGS) 
{
	Digital_State_t *_op_DOUT, *_op_DOUT_old;
	Digital_State_t *_op_RADDR, *_op_RADDR_old;
	Digital_State_t *_op_FILLCOUNT, *_op_FILLCOUNT_old;
	Digital_State_t *_op_VALIDOUT, *_op_VALIDOUT_old;
	Digital_State_t *_op_NOTFULL, *_op_NOTFULL_old;
	Digital_State_t *_op_READY, *_op_READY_old;
	Digital_State_t *_op_C0_DM_PAD, *_op_C0_DM_PAD_old;
	Digital_State_t *_op_C0_ODT_PAD, *_op_C0_ODT_PAD_old;
	Digital_State_t *_op_C0_CK_PAD, *_op_C0_CK_PAD_old;
	Digital_State_t *_op_C0_CKBAR_PAD, *_op_C0_CKBAR_PAD_old;
	Digital_State_t *_op_C0_CKE_PAD, *_op_C0_CKE_PAD_old;
	Digital_State_t *_op_C0_CSBAR_PAD, *_op_C0_CSBAR_PAD_old;
	Digital_State_t *_op_C0_RASBAR_PAD, *_op_C0_RASBAR_PAD_old;
	Digital_State_t *_op_C0_CASBAR_PAD, *_op_C0_CASBAR_PAD_old;
	Digital_State_t *_op_C0_WEBAR_PAD, *_op_C0_WEBAR_PAD_old;
	Digital_State_t *_op_C0_BA_PAD, *_op_C0_BA_PAD_old;
	Digital_State_t *_op_C0_A_PAD, *_op_C0_A_PAD_old;

    static int inst_count=0;
    int count=0;
        
    if(INIT)
    {   
        inst_count++;
        PARAM(instance_id)=inst_count;
        fooddr2_controller(0,inst_count);
        /* Allocate storage for output ports and set the load for input ports */

        
        port_CLK=PORT_SIZE(CLK);

        port_RESET=PORT_SIZE(RESET);

        port_CMD=PORT_SIZE(CMD);

        port_SZ=PORT_SIZE(SZ);

        port_OP=PORT_SIZE(OP);

        port_FETCHING=PORT_SIZE(FETCHING);

        port_DIN=PORT_SIZE(DIN);

        port_ADDR=PORT_SIZE(ADDR);

        port_INITDDR=PORT_SIZE(INITDDR);

        port_DOUT=PORT_SIZE(DOUT);

        port_RADDR=PORT_SIZE(RADDR);

        port_FILLCOUNT=PORT_SIZE(FILLCOUNT);

        port_VALIDOUT=PORT_SIZE(VALIDOUT);

        port_NOTFULL=PORT_SIZE(NOTFULL);

        port_READY=PORT_SIZE(READY);

        port_C0_DM_PAD=PORT_SIZE(C0_DM_PAD);

        port_C0_ODT_PAD=PORT_SIZE(C0_ODT_PAD);

        port_C0_CK_PAD=PORT_SIZE(C0_CK_PAD);

        port_C0_CKBAR_PAD=PORT_SIZE(C0_CKBAR_PAD);

        port_C0_CKE_PAD=PORT_SIZE(C0_CKE_PAD);

        port_C0_CSBAR_PAD=PORT_SIZE(C0_CSBAR_PAD);

        port_C0_RASBAR_PAD=PORT_SIZE(C0_RASBAR_PAD);

        port_C0_CASBAR_PAD=PORT_SIZE(C0_CASBAR_PAD);

        port_C0_WEBAR_PAD=PORT_SIZE(C0_WEBAR_PAD);

        port_C0_BA_PAD=PORT_SIZE(C0_BA_PAD);

        port_C0_A_PAD=PORT_SIZE(C0_A_PAD);
		cm_event_alloc(0,16*sizeof(Digital_State_t));
		cm_event_alloc(1,25*sizeof(Digital_State_t));
		cm_event_alloc(2,7*sizeof(Digital_State_t));
		cm_event_alloc(3,1*sizeof(Digital_State_t));
		cm_event_alloc(4,1*sizeof(Digital_State_t));
		cm_event_alloc(5,1*sizeof(Digital_State_t));
		cm_event_alloc(6,2*sizeof(Digital_State_t));
		cm_event_alloc(7,1*sizeof(Digital_State_t));
		cm_event_alloc(8,1*sizeof(Digital_State_t));
		cm_event_alloc(9,1*sizeof(Digital_State_t));
		cm_event_alloc(10,1*sizeof(Digital_State_t));
		cm_event_alloc(11,1*sizeof(Digital_State_t));
		cm_event_alloc(12,1*sizeof(Digital_State_t));
		cm_event_alloc(13,1*sizeof(Digital_State_t));
		cm_event_alloc(14,1*sizeof(Digital_State_t));
		cm_event_alloc(15,2*sizeof(Digital_State_t));
		cm_event_alloc(16,13*sizeof(Digital_State_t));
		/* set the load for input ports. */
		int Ii;
		for(Ii=0;Ii<PORT_SIZE(CLK);Ii++)
		{
			LOAD(CLK[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(RESET);Ii++)
		{
			LOAD(RESET[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(CMD);Ii++)
		{
			LOAD(CMD[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(SZ);Ii++)
		{
			LOAD(SZ[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(OP);Ii++)
		{
			LOAD(OP[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(FETCHING);Ii++)
		{
			LOAD(FETCHING[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(DIN);Ii++)
		{
			LOAD(DIN[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(ADDR);Ii++)
		{
			LOAD(ADDR[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(INITDDR);Ii++)
		{
			LOAD(INITDDR[Ii])=PARAM(input_load); 
		}

		/*Retrieve Storage for output*/
		_op_DOUT = _op_DOUT_old = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_RADDR = _op_RADDR_old = (Digital_State_t *) cm_event_get_ptr(1,0);
		_op_FILLCOUNT = _op_FILLCOUNT_old = (Digital_State_t *) cm_event_get_ptr(2,0);
		_op_VALIDOUT = _op_VALIDOUT_old = (Digital_State_t *) cm_event_get_ptr(3,0);
		_op_NOTFULL = _op_NOTFULL_old = (Digital_State_t *) cm_event_get_ptr(4,0);
		_op_READY = _op_READY_old = (Digital_State_t *) cm_event_get_ptr(5,0);
		_op_C0_DM_PAD = _op_C0_DM_PAD_old = (Digital_State_t *) cm_event_get_ptr(6,0);
		_op_C0_ODT_PAD = _op_C0_ODT_PAD_old = (Digital_State_t *) cm_event_get_ptr(7,0);
		_op_C0_CK_PAD = _op_C0_CK_PAD_old = (Digital_State_t *) cm_event_get_ptr(8,0);
		_op_C0_CKBAR_PAD = _op_C0_CKBAR_PAD_old = (Digital_State_t *) cm_event_get_ptr(9,0);
		_op_C0_CKE_PAD = _op_C0_CKE_PAD_old = (Digital_State_t *) cm_event_get_ptr(10,0);
		_op_C0_CSBAR_PAD = _op_C0_CSBAR_PAD_old = (Digital_State_t *) cm_event_get_ptr(11,0);
		_op_C0_RASBAR_PAD = _op_C0_RASBAR_PAD_old = (Digital_State_t *) cm_event_get_ptr(12,0);
		_op_C0_CASBAR_PAD = _op_C0_CASBAR_PAD_old = (Digital_State_t *) cm_event_get_ptr(13,0);
		_op_C0_WEBAR_PAD = _op_C0_WEBAR_PAD_old = (Digital_State_t *) cm_event_get_ptr(14,0);
		_op_C0_BA_PAD = _op_C0_BA_PAD_old = (Digital_State_t *) cm_event_get_ptr(15,0);
		_op_C0_A_PAD = _op_C0_A_PAD_old = (Digital_State_t *) cm_event_get_ptr(16,0);


	}
	else
	{
		_op_DOUT = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_DOUT_old = (Digital_State_t *) cm_event_get_ptr(0,1);
		_op_RADDR = (Digital_State_t *) cm_event_get_ptr(1,1);
		_op_RADDR_old = (Digital_State_t *) cm_event_get_ptr(1,2);
		_op_FILLCOUNT = (Digital_State_t *) cm_event_get_ptr(2,2);
		_op_FILLCOUNT_old = (Digital_State_t *) cm_event_get_ptr(2,3);
		_op_VALIDOUT = (Digital_State_t *) cm_event_get_ptr(3,3);
		_op_VALIDOUT_old = (Digital_State_t *) cm_event_get_ptr(3,4);
		_op_NOTFULL = (Digital_State_t *) cm_event_get_ptr(4,4);
		_op_NOTFULL_old = (Digital_State_t *) cm_event_get_ptr(4,5);
		_op_READY = (Digital_State_t *) cm_event_get_ptr(5,5);
		_op_READY_old = (Digital_State_t *) cm_event_get_ptr(5,6);
		_op_C0_DM_PAD = (Digital_State_t *) cm_event_get_ptr(6,6);
		_op_C0_DM_PAD_old = (Digital_State_t *) cm_event_get_ptr(6,7);
		_op_C0_ODT_PAD = (Digital_State_t *) cm_event_get_ptr(7,7);
		_op_C0_ODT_PAD_old = (Digital_State_t *) cm_event_get_ptr(7,8);
		_op_C0_CK_PAD = (Digital_State_t *) cm_event_get_ptr(8,8);
		_op_C0_CK_PAD_old = (Digital_State_t *) cm_event_get_ptr(8,9);
		_op_C0_CKBAR_PAD = (Digital_State_t *) cm_event_get_ptr(9,9);
		_op_C0_CKBAR_PAD_old = (Digital_State_t *) cm_event_get_ptr(9,10);
		_op_C0_CKE_PAD = (Digital_State_t *) cm_event_get_ptr(10,10);
		_op_C0_CKE_PAD_old = (Digital_State_t *) cm_event_get_ptr(10,11);
		_op_C0_CSBAR_PAD = (Digital_State_t *) cm_event_get_ptr(11,11);
		_op_C0_CSBAR_PAD_old = (Digital_State_t *) cm_event_get_ptr(11,12);
		_op_C0_RASBAR_PAD = (Digital_State_t *) cm_event_get_ptr(12,12);
		_op_C0_RASBAR_PAD_old = (Digital_State_t *) cm_event_get_ptr(12,13);
		_op_C0_CASBAR_PAD = (Digital_State_t *) cm_event_get_ptr(13,13);
		_op_C0_CASBAR_PAD_old = (Digital_State_t *) cm_event_get_ptr(13,14);
		_op_C0_WEBAR_PAD = (Digital_State_t *) cm_event_get_ptr(14,14);
		_op_C0_WEBAR_PAD_old = (Digital_State_t *) cm_event_get_ptr(14,15);
		_op_C0_BA_PAD = (Digital_State_t *) cm_event_get_ptr(15,15);
		_op_C0_BA_PAD_old = (Digital_State_t *) cm_event_get_ptr(15,16);
		_op_C0_A_PAD = (Digital_State_t *) cm_event_get_ptr(16,16);
		_op_C0_A_PAD_old = (Digital_State_t *) cm_event_get_ptr(16,17);
	}

	//Formating data for sending it to client
	int Ii;
	count=(int)PARAM(instance_id);

    for(Ii=0;Ii<PORT_SIZE(CLK);Ii++)
    {
        if( INPUT_STATE(CLK[Ii])==ZERO )
        {
            temp_CLK[Ii]=0;            }
        else
        {
            temp_CLK[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(RESET);Ii++)
    {
        if( INPUT_STATE(RESET[Ii])==ZERO )
        {
            temp_RESET[Ii]=0;            }
        else
        {
            temp_RESET[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(CMD);Ii++)
    {
        if( INPUT_STATE(CMD[Ii])==ZERO )
        {
            temp_CMD[Ii]=0;            }
        else
        {
            temp_CMD[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(SZ);Ii++)
    {
        if( INPUT_STATE(SZ[Ii])==ZERO )
        {
            temp_SZ[Ii]=0;            }
        else
        {
            temp_SZ[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(OP);Ii++)
    {
        if( INPUT_STATE(OP[Ii])==ZERO )
        {
            temp_OP[Ii]=0;            }
        else
        {
            temp_OP[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(FETCHING);Ii++)
    {
        if( INPUT_STATE(FETCHING[Ii])==ZERO )
        {
            temp_FETCHING[Ii]=0;            }
        else
        {
            temp_FETCHING[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(DIN);Ii++)
    {
        if( INPUT_STATE(DIN[Ii])==ZERO )
        {
            temp_DIN[Ii]=0;            }
        else
        {
            temp_DIN[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(ADDR);Ii++)
    {
        if( INPUT_STATE(ADDR[Ii])==ZERO )
        {
            temp_ADDR[Ii]=0;            }
        else
        {
            temp_ADDR[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(INITDDR);Ii++)
    {
        if( INPUT_STATE(INITDDR[Ii])==ZERO )
        {
            temp_INITDDR[Ii]=0;            }
        else
        {
            temp_INITDDR[Ii]=1;
        }
            }
	fooddr2_controller(1,count);

	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(DOUT);Ii++)
    {
        if(temp_DOUT[Ii]==0)
        {
            _op_DOUT[Ii]=ZERO;
            }
        else if(temp_DOUT[Ii]==1)
        {
            _op_DOUT[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(DOUT[Ii]) = _op_DOUT[Ii];
            }
        else if(_op_DOUT[Ii] != _op_DOUT_old[Ii])
        {
            OUTPUT_STATE(DOUT[Ii]) = _op_DOUT[Ii];
            OUTPUT_DELAY(DOUT[Ii]) = ((_op_DOUT[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(DOUT[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(DOUT[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(RADDR);Ii++)
    {
        if(temp_RADDR[Ii]==0)
        {
            _op_RADDR[Ii]=ZERO;
            }
        else if(temp_RADDR[Ii]==1)
        {
            _op_RADDR[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(RADDR[Ii]) = _op_RADDR[Ii];
            }
        else if(_op_RADDR[Ii] != _op_RADDR_old[Ii])
        {
            OUTPUT_STATE(RADDR[Ii]) = _op_RADDR[Ii];
            OUTPUT_DELAY(RADDR[Ii]) = ((_op_RADDR[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(RADDR[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(RADDR[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(FILLCOUNT);Ii++)
    {
        if(temp_FILLCOUNT[Ii]==0)
        {
            _op_FILLCOUNT[Ii]=ZERO;
            }
        else if(temp_FILLCOUNT[Ii]==1)
        {
            _op_FILLCOUNT[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(FILLCOUNT[Ii]) = _op_FILLCOUNT[Ii];
            }
        else if(_op_FILLCOUNT[Ii] != _op_FILLCOUNT_old[Ii])
        {
            OUTPUT_STATE(FILLCOUNT[Ii]) = _op_FILLCOUNT[Ii];
            OUTPUT_DELAY(FILLCOUNT[Ii]) = ((_op_FILLCOUNT[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(FILLCOUNT[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(FILLCOUNT[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(VALIDOUT);Ii++)
    {
        if(temp_VALIDOUT[Ii]==0)
        {
            _op_VALIDOUT[Ii]=ZERO;
            }
        else if(temp_VALIDOUT[Ii]==1)
        {
            _op_VALIDOUT[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(VALIDOUT[Ii]) = _op_VALIDOUT[Ii];
            }
        else if(_op_VALIDOUT[Ii] != _op_VALIDOUT_old[Ii])
        {
            OUTPUT_STATE(VALIDOUT[Ii]) = _op_VALIDOUT[Ii];
            OUTPUT_DELAY(VALIDOUT[Ii]) = ((_op_VALIDOUT[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(VALIDOUT[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(VALIDOUT[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(NOTFULL);Ii++)
    {
        if(temp_NOTFULL[Ii]==0)
        {
            _op_NOTFULL[Ii]=ZERO;
            }
        else if(temp_NOTFULL[Ii]==1)
        {
            _op_NOTFULL[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(NOTFULL[Ii]) = _op_NOTFULL[Ii];
            }
        else if(_op_NOTFULL[Ii] != _op_NOTFULL_old[Ii])
        {
            OUTPUT_STATE(NOTFULL[Ii]) = _op_NOTFULL[Ii];
            OUTPUT_DELAY(NOTFULL[Ii]) = ((_op_NOTFULL[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(NOTFULL[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(NOTFULL[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(READY);Ii++)
    {
        if(temp_READY[Ii]==0)
        {
            _op_READY[Ii]=ZERO;
            }
        else if(temp_READY[Ii]==1)
        {
            _op_READY[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(READY[Ii]) = _op_READY[Ii];
            }
        else if(_op_READY[Ii] != _op_READY_old[Ii])
        {
            OUTPUT_STATE(READY[Ii]) = _op_READY[Ii];
            OUTPUT_DELAY(READY[Ii]) = ((_op_READY[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(READY[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(READY[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(C0_DM_PAD);Ii++)
    {
        if(temp_C0_DM_PAD[Ii]==0)
        {
            _op_C0_DM_PAD[Ii]=ZERO;
            }
        else if(temp_C0_DM_PAD[Ii]==1)
        {
            _op_C0_DM_PAD[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(C0_DM_PAD[Ii]) = _op_C0_DM_PAD[Ii];
            }
        else if(_op_C0_DM_PAD[Ii] != _op_C0_DM_PAD_old[Ii])
        {
            OUTPUT_STATE(C0_DM_PAD[Ii]) = _op_C0_DM_PAD[Ii];
            OUTPUT_DELAY(C0_DM_PAD[Ii]) = ((_op_C0_DM_PAD[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(C0_DM_PAD[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(C0_DM_PAD[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(C0_ODT_PAD);Ii++)
    {
        if(temp_C0_ODT_PAD[Ii]==0)
        {
            _op_C0_ODT_PAD[Ii]=ZERO;
            }
        else if(temp_C0_ODT_PAD[Ii]==1)
        {
            _op_C0_ODT_PAD[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(C0_ODT_PAD[Ii]) = _op_C0_ODT_PAD[Ii];
            }
        else if(_op_C0_ODT_PAD[Ii] != _op_C0_ODT_PAD_old[Ii])
        {
            OUTPUT_STATE(C0_ODT_PAD[Ii]) = _op_C0_ODT_PAD[Ii];
            OUTPUT_DELAY(C0_ODT_PAD[Ii]) = ((_op_C0_ODT_PAD[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(C0_ODT_PAD[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(C0_ODT_PAD[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(C0_CK_PAD);Ii++)
    {
        if(temp_C0_CK_PAD[Ii]==0)
        {
            _op_C0_CK_PAD[Ii]=ZERO;
            }
        else if(temp_C0_CK_PAD[Ii]==1)
        {
            _op_C0_CK_PAD[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(C0_CK_PAD[Ii]) = _op_C0_CK_PAD[Ii];
            }
        else if(_op_C0_CK_PAD[Ii] != _op_C0_CK_PAD_old[Ii])
        {
            OUTPUT_STATE(C0_CK_PAD[Ii]) = _op_C0_CK_PAD[Ii];
            OUTPUT_DELAY(C0_CK_PAD[Ii]) = ((_op_C0_CK_PAD[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(C0_CK_PAD[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(C0_CK_PAD[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(C0_CKBAR_PAD);Ii++)
    {
        if(temp_C0_CKBAR_PAD[Ii]==0)
        {
            _op_C0_CKBAR_PAD[Ii]=ZERO;
            }
        else if(temp_C0_CKBAR_PAD[Ii]==1)
        {
            _op_C0_CKBAR_PAD[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(C0_CKBAR_PAD[Ii]) = _op_C0_CKBAR_PAD[Ii];
            }
        else if(_op_C0_CKBAR_PAD[Ii] != _op_C0_CKBAR_PAD_old[Ii])
        {
            OUTPUT_STATE(C0_CKBAR_PAD[Ii]) = _op_C0_CKBAR_PAD[Ii];
            OUTPUT_DELAY(C0_CKBAR_PAD[Ii]) = ((_op_C0_CKBAR_PAD[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(C0_CKBAR_PAD[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(C0_CKBAR_PAD[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(C0_CKE_PAD);Ii++)
    {
        if(temp_C0_CKE_PAD[Ii]==0)
        {
            _op_C0_CKE_PAD[Ii]=ZERO;
            }
        else if(temp_C0_CKE_PAD[Ii]==1)
        {
            _op_C0_CKE_PAD[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(C0_CKE_PAD[Ii]) = _op_C0_CKE_PAD[Ii];
            }
        else if(_op_C0_CKE_PAD[Ii] != _op_C0_CKE_PAD_old[Ii])
        {
            OUTPUT_STATE(C0_CKE_PAD[Ii]) = _op_C0_CKE_PAD[Ii];
            OUTPUT_DELAY(C0_CKE_PAD[Ii]) = ((_op_C0_CKE_PAD[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(C0_CKE_PAD[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(C0_CKE_PAD[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(C0_CSBAR_PAD);Ii++)
    {
        if(temp_C0_CSBAR_PAD[Ii]==0)
        {
            _op_C0_CSBAR_PAD[Ii]=ZERO;
            }
        else if(temp_C0_CSBAR_PAD[Ii]==1)
        {
            _op_C0_CSBAR_PAD[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(C0_CSBAR_PAD[Ii]) = _op_C0_CSBAR_PAD[Ii];
            }
        else if(_op_C0_CSBAR_PAD[Ii] != _op_C0_CSBAR_PAD_old[Ii])
        {
            OUTPUT_STATE(C0_CSBAR_PAD[Ii]) = _op_C0_CSBAR_PAD[Ii];
            OUTPUT_DELAY(C0_CSBAR_PAD[Ii]) = ((_op_C0_CSBAR_PAD[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(C0_CSBAR_PAD[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(C0_CSBAR_PAD[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(C0_RASBAR_PAD);Ii++)
    {
        if(temp_C0_RASBAR_PAD[Ii]==0)
        {
            _op_C0_RASBAR_PAD[Ii]=ZERO;
            }
        else if(temp_C0_RASBAR_PAD[Ii]==1)
        {
            _op_C0_RASBAR_PAD[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(C0_RASBAR_PAD[Ii]) = _op_C0_RASBAR_PAD[Ii];
            }
        else if(_op_C0_RASBAR_PAD[Ii] != _op_C0_RASBAR_PAD_old[Ii])
        {
            OUTPUT_STATE(C0_RASBAR_PAD[Ii]) = _op_C0_RASBAR_PAD[Ii];
            OUTPUT_DELAY(C0_RASBAR_PAD[Ii]) = ((_op_C0_RASBAR_PAD[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(C0_RASBAR_PAD[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(C0_RASBAR_PAD[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(C0_CASBAR_PAD);Ii++)
    {
        if(temp_C0_CASBAR_PAD[Ii]==0)
        {
            _op_C0_CASBAR_PAD[Ii]=ZERO;
            }
        else if(temp_C0_CASBAR_PAD[Ii]==1)
        {
            _op_C0_CASBAR_PAD[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(C0_CASBAR_PAD[Ii]) = _op_C0_CASBAR_PAD[Ii];
            }
        else if(_op_C0_CASBAR_PAD[Ii] != _op_C0_CASBAR_PAD_old[Ii])
        {
            OUTPUT_STATE(C0_CASBAR_PAD[Ii]) = _op_C0_CASBAR_PAD[Ii];
            OUTPUT_DELAY(C0_CASBAR_PAD[Ii]) = ((_op_C0_CASBAR_PAD[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(C0_CASBAR_PAD[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(C0_CASBAR_PAD[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(C0_WEBAR_PAD);Ii++)
    {
        if(temp_C0_WEBAR_PAD[Ii]==0)
        {
            _op_C0_WEBAR_PAD[Ii]=ZERO;
            }
        else if(temp_C0_WEBAR_PAD[Ii]==1)
        {
            _op_C0_WEBAR_PAD[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(C0_WEBAR_PAD[Ii]) = _op_C0_WEBAR_PAD[Ii];
            }
        else if(_op_C0_WEBAR_PAD[Ii] != _op_C0_WEBAR_PAD_old[Ii])
        {
            OUTPUT_STATE(C0_WEBAR_PAD[Ii]) = _op_C0_WEBAR_PAD[Ii];
            OUTPUT_DELAY(C0_WEBAR_PAD[Ii]) = ((_op_C0_WEBAR_PAD[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(C0_WEBAR_PAD[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(C0_WEBAR_PAD[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(C0_BA_PAD);Ii++)
    {
        if(temp_C0_BA_PAD[Ii]==0)
        {
            _op_C0_BA_PAD[Ii]=ZERO;
            }
        else if(temp_C0_BA_PAD[Ii]==1)
        {
            _op_C0_BA_PAD[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(C0_BA_PAD[Ii]) = _op_C0_BA_PAD[Ii];
            }
        else if(_op_C0_BA_PAD[Ii] != _op_C0_BA_PAD_old[Ii])
        {
            OUTPUT_STATE(C0_BA_PAD[Ii]) = _op_C0_BA_PAD[Ii];
            OUTPUT_DELAY(C0_BA_PAD[Ii]) = ((_op_C0_BA_PAD[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(C0_BA_PAD[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(C0_BA_PAD[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(C0_A_PAD);Ii++)
    {
        if(temp_C0_A_PAD[Ii]==0)
        {
            _op_C0_A_PAD[Ii]=ZERO;
            }
        else if(temp_C0_A_PAD[Ii]==1)
        {
            _op_C0_A_PAD[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(C0_A_PAD[Ii]) = _op_C0_A_PAD[Ii];
            }
        else if(_op_C0_A_PAD[Ii] != _op_C0_A_PAD_old[Ii])
        {
            OUTPUT_STATE(C0_A_PAD[Ii]) = _op_C0_A_PAD[Ii];
            OUTPUT_DELAY(C0_A_PAD[Ii]) = ((_op_C0_A_PAD[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(C0_A_PAD[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(C0_A_PAD[Ii]) = STRONG;
    }

}