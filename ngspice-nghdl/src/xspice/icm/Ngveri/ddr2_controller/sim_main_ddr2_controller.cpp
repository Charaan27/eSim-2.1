/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vddr2_controller.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_CLK[1024];
        extern "C" int port_CLK;
        extern "C" int temp_RESET[1024];
        extern "C" int port_RESET;
        extern "C" int temp_CMD[1024];
        extern "C" int port_CMD;
        extern "C" int temp_SZ[1024];
        extern "C" int port_SZ;
        extern "C" int temp_OP[1024];
        extern "C" int port_OP;
        extern "C" int temp_FETCHING[1024];
        extern "C" int port_FETCHING;
        extern "C" int temp_DIN[1024];
        extern "C" int port_DIN;
        extern "C" int temp_ADDR[1024];
        extern "C" int port_ADDR;
        extern "C" int temp_INITDDR[1024];
        extern "C" int port_INITDDR;
        extern "C" int temp_DOUT[1024];
        extern "C" int port_DOUT;
        extern "C" int temp_RADDR[1024];
        extern "C" int port_RADDR;
        extern "C" int temp_FILLCOUNT[1024];
        extern "C" int port_FILLCOUNT;
        extern "C" int temp_VALIDOUT[1024];
        extern "C" int port_VALIDOUT;
        extern "C" int temp_NOTFULL[1024];
        extern "C" int port_NOTFULL;
        extern "C" int temp_READY[1024];
        extern "C" int port_READY;
        extern "C" int temp_C0_DM_PAD[1024];
        extern "C" int port_C0_DM_PAD;
        extern "C" int temp_C0_ODT_PAD[1024];
        extern "C" int port_C0_ODT_PAD;
        extern "C" int temp_C0_CK_PAD[1024];
        extern "C" int port_C0_CK_PAD;
        extern "C" int temp_C0_CKBAR_PAD[1024];
        extern "C" int port_C0_CKBAR_PAD;
        extern "C" int temp_C0_CKE_PAD[1024];
        extern "C" int port_C0_CKE_PAD;
        extern "C" int temp_C0_CSBAR_PAD[1024];
        extern "C" int port_C0_CSBAR_PAD;
        extern "C" int temp_C0_RASBAR_PAD[1024];
        extern "C" int port_C0_RASBAR_PAD;
        extern "C" int temp_C0_CASBAR_PAD[1024];
        extern "C" int port_C0_CASBAR_PAD;
        extern "C" int temp_C0_WEBAR_PAD[1024];
        extern "C" int port_C0_WEBAR_PAD;
        extern "C" int temp_C0_BA_PAD[1024];
        extern "C" int port_C0_BA_PAD;
        extern "C" int temp_C0_A_PAD[1024];
        extern "C" int port_C0_A_PAD;
        extern "C" int fooddr2_controller(int,int);
        
        void int2arrddr2_controller(int  num, int array[], int n)
        {   
            for (int i = 0; i < n && num>=0; i++) 
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intddr2_controller(int array[],int n)
        {   
            int i,k=0;
            for (i = 0; i < n; i++) 
                k = 2 * k + array[i];
            return k;
        }
        
        int fooddr2_controller(int init,int count) 
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vddr2_controller* ddr2_controller[1024];
            count--;
            if (init==0) 
            {
                ddr2_controller[count]=new Vddr2_controller{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============ddr2_controller : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("CLK=%d\n", ddr2_controller[count] ->CLK);
				printf("RESET=%d\n", ddr2_controller[count] ->RESET);
				printf("CMD=%d\n", ddr2_controller[count] ->CMD);
				printf("SZ=%d\n", ddr2_controller[count] ->SZ);
				printf("OP=%d\n", ddr2_controller[count] ->OP);
				printf("FETCHING=%d\n", ddr2_controller[count] ->FETCHING);
				printf("DIN=%d\n", ddr2_controller[count] ->DIN);
				printf("ADDR=%d\n", ddr2_controller[count] ->ADDR);
				printf("INITDDR=%d\n", ddr2_controller[count] ->INITDDR);
				printf("DOUT=%d\n", ddr2_controller[count] ->DOUT);
				printf("RADDR=%d\n", ddr2_controller[count] ->RADDR);
				printf("FILLCOUNT=%d\n", ddr2_controller[count] ->FILLCOUNT);
				printf("VALIDOUT=%d\n", ddr2_controller[count] ->VALIDOUT);
				printf("NOTFULL=%d\n", ddr2_controller[count] ->NOTFULL);
				printf("READY=%d\n", ddr2_controller[count] ->READY);
				printf("C0_DM_PAD=%d\n", ddr2_controller[count] ->C0_DM_PAD);
				printf("C0_ODT_PAD=%d\n", ddr2_controller[count] ->C0_ODT_PAD);
				printf("C0_CK_PAD=%d\n", ddr2_controller[count] ->C0_CK_PAD);
				printf("C0_CKBAR_PAD=%d\n", ddr2_controller[count] ->C0_CKBAR_PAD);
				printf("C0_CKE_PAD=%d\n", ddr2_controller[count] ->C0_CKE_PAD);
				printf("C0_CSBAR_PAD=%d\n", ddr2_controller[count] ->C0_CSBAR_PAD);
				printf("C0_RASBAR_PAD=%d\n", ddr2_controller[count] ->C0_RASBAR_PAD);
				printf("C0_CASBAR_PAD=%d\n", ddr2_controller[count] ->C0_CASBAR_PAD);
				printf("C0_WEBAR_PAD=%d\n", ddr2_controller[count] ->C0_WEBAR_PAD);
				printf("C0_BA_PAD=%d\n", ddr2_controller[count] ->C0_BA_PAD);
				printf("C0_A_PAD=%d\n", ddr2_controller[count] ->C0_A_PAD);
				ddr2_controller[count]->CLK = arr2intddr2_controller(temp_CLK, port_CLK);
				ddr2_controller[count]->RESET = arr2intddr2_controller(temp_RESET, port_RESET);
				ddr2_controller[count]->CMD = arr2intddr2_controller(temp_CMD, port_CMD);
				ddr2_controller[count]->SZ = arr2intddr2_controller(temp_SZ, port_SZ);
				ddr2_controller[count]->OP = arr2intddr2_controller(temp_OP, port_OP);
				ddr2_controller[count]->FETCHING = arr2intddr2_controller(temp_FETCHING, port_FETCHING);
				ddr2_controller[count]->DIN = arr2intddr2_controller(temp_DIN, port_DIN);
				ddr2_controller[count]->ADDR = arr2intddr2_controller(temp_ADDR, port_ADDR);
				ddr2_controller[count]->INITDDR = arr2intddr2_controller(temp_INITDDR, port_INITDDR);
				ddr2_controller[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("CLK=%d\n", ddr2_controller[count] ->CLK);
				printf("RESET=%d\n", ddr2_controller[count] ->RESET);
				printf("CMD=%d\n", ddr2_controller[count] ->CMD);
				printf("SZ=%d\n", ddr2_controller[count] ->SZ);
				printf("OP=%d\n", ddr2_controller[count] ->OP);
				printf("FETCHING=%d\n", ddr2_controller[count] ->FETCHING);
				printf("DIN=%d\n", ddr2_controller[count] ->DIN);
				printf("ADDR=%d\n", ddr2_controller[count] ->ADDR);
				printf("INITDDR=%d\n", ddr2_controller[count] ->INITDDR);
				printf("DOUT=%d\n", ddr2_controller[count] ->DOUT);
				printf("RADDR=%d\n", ddr2_controller[count] ->RADDR);
				printf("FILLCOUNT=%d\n", ddr2_controller[count] ->FILLCOUNT);
				printf("VALIDOUT=%d\n", ddr2_controller[count] ->VALIDOUT);
				printf("NOTFULL=%d\n", ddr2_controller[count] ->NOTFULL);
				printf("READY=%d\n", ddr2_controller[count] ->READY);
				printf("C0_DM_PAD=%d\n", ddr2_controller[count] ->C0_DM_PAD);
				printf("C0_ODT_PAD=%d\n", ddr2_controller[count] ->C0_ODT_PAD);
				printf("C0_CK_PAD=%d\n", ddr2_controller[count] ->C0_CK_PAD);
				printf("C0_CKBAR_PAD=%d\n", ddr2_controller[count] ->C0_CKBAR_PAD);
				printf("C0_CKE_PAD=%d\n", ddr2_controller[count] ->C0_CKE_PAD);
				printf("C0_CSBAR_PAD=%d\n", ddr2_controller[count] ->C0_CSBAR_PAD);
				printf("C0_RASBAR_PAD=%d\n", ddr2_controller[count] ->C0_RASBAR_PAD);
				printf("C0_CASBAR_PAD=%d\n", ddr2_controller[count] ->C0_CASBAR_PAD);
				printf("C0_WEBAR_PAD=%d\n", ddr2_controller[count] ->C0_WEBAR_PAD);
				printf("C0_BA_PAD=%d\n", ddr2_controller[count] ->C0_BA_PAD);
				printf("C0_A_PAD=%d\n", ddr2_controller[count] ->C0_A_PAD);
				int2arrddr2_controller(ddr2_controller[count] -> DOUT, temp_DOUT, port_DOUT);
				int2arrddr2_controller(ddr2_controller[count] -> RADDR, temp_RADDR, port_RADDR);
				int2arrddr2_controller(ddr2_controller[count] -> FILLCOUNT, temp_FILLCOUNT, port_FILLCOUNT);
				int2arrddr2_controller(ddr2_controller[count] -> VALIDOUT, temp_VALIDOUT, port_VALIDOUT);
				int2arrddr2_controller(ddr2_controller[count] -> NOTFULL, temp_NOTFULL, port_NOTFULL);
				int2arrddr2_controller(ddr2_controller[count] -> READY, temp_READY, port_READY);
				int2arrddr2_controller(ddr2_controller[count] -> C0_DM_PAD, temp_C0_DM_PAD, port_C0_DM_PAD);
				int2arrddr2_controller(ddr2_controller[count] -> C0_ODT_PAD, temp_C0_ODT_PAD, port_C0_ODT_PAD);
				int2arrddr2_controller(ddr2_controller[count] -> C0_CK_PAD, temp_C0_CK_PAD, port_C0_CK_PAD);
				int2arrddr2_controller(ddr2_controller[count] -> C0_CKBAR_PAD, temp_C0_CKBAR_PAD, port_C0_CKBAR_PAD);
				int2arrddr2_controller(ddr2_controller[count] -> C0_CKE_PAD, temp_C0_CKE_PAD, port_C0_CKE_PAD);
				int2arrddr2_controller(ddr2_controller[count] -> C0_CSBAR_PAD, temp_C0_CSBAR_PAD, port_C0_CSBAR_PAD);
				int2arrddr2_controller(ddr2_controller[count] -> C0_RASBAR_PAD, temp_C0_RASBAR_PAD, port_C0_RASBAR_PAD);
				int2arrddr2_controller(ddr2_controller[count] -> C0_CASBAR_PAD, temp_C0_CASBAR_PAD, port_C0_CASBAR_PAD);
				int2arrddr2_controller(ddr2_controller[count] -> C0_WEBAR_PAD, temp_C0_WEBAR_PAD, port_C0_WEBAR_PAD);
				int2arrddr2_controller(ddr2_controller[count] -> C0_BA_PAD, temp_C0_BA_PAD, port_C0_BA_PAD);
				int2arrddr2_controller(ddr2_controller[count] -> C0_A_PAD, temp_C0_A_PAD, port_C0_A_PAD);

            }
            return 0;
        }