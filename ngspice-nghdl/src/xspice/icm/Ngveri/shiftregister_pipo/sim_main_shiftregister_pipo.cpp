/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vshiftregister_pipo.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_Clk[1024];
        extern "C" int port_Clk;
        extern "C" int temp_Pi[1024];
        extern "C" int port_Pi;
        extern "C" int temp_Po[1024];
        extern "C" int port_Po;
        extern "C" int fooshiftregister_pipo(int,int);
        
        void int2arrshiftregister_pipo(int  num, int array[], int n)
        {   
            for (int i = 0; i < n && num>=0; i++) 
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intshiftregister_pipo(int array[],int n)
        {   
            int i,k=0;
            for (i = 0; i < n; i++) 
                k = 2 * k + array[i];
            return k;
        }
        
        int fooshiftregister_pipo(int init,int count) 
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vshiftregister_pipo* shiftregister_pipo[1024];
            count--;
            if (init==0) 
            {
                shiftregister_pipo[count]=new Vshiftregister_pipo{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============New Iteration===========");
                printf("\nInside foo before eval.....\n");
				printf("Clk=%d\n", shiftregister_pipo[count] ->Clk);
				printf("Pi=%d\n", shiftregister_pipo[count] ->Pi);
				printf("Po=%d\n", shiftregister_pipo[count] ->Po);
				shiftregister_pipo[count]->Clk = arr2intshiftregister_pipo(temp_Clk, port_Clk);
				shiftregister_pipo[count]->Pi = arr2intshiftregister_pipo(temp_Pi, port_Pi);
				shiftregister_pipo[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("Clk=%d\n", shiftregister_pipo[count] ->Clk);
				printf("Pi=%d\n", shiftregister_pipo[count] ->Pi);
				printf("Po=%d\n", shiftregister_pipo[count] ->Po);
				int2arrshiftregister_pipo(shiftregister_pipo[count] -> Po, temp_Po, port_Po);

            }
            return 0;
        }