/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

                
        #include <stdio.h>
        #include <math.h>
        #include <string.h>
        #include "sim_main_coef_reload_tb.h"

        
void cm_coef_reload_tb(ARGS) 
{

    static int inst_count=0;
    int count=0;
        
    if(INIT)
    {   
        inst_count++;
        PARAM(instance_id)=inst_count;
        foocoef_reload_tb(0,inst_count);
        /* Allocate storage for output ports and set the load for input ports */

        
        port__file=PORT_SIZE(_file);

        port_fopen=PORT_SIZE(fopen);

        port_coef_reload_input=PORT_SIZE(coef_reload_input);

        port_txt=PORT_SIZE(txt);

        port_r=PORT_SIZE(r);

        port_d=PORT_SIZE(d);

        port_din_int=PORT_SIZE(din_int);
		/* set the load for input ports. */
		int Ii;
		for(Ii=0;Ii<PORT_SIZE(_file);Ii++)
		{
			LOAD(_file[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(fopen);Ii++)
		{
			LOAD(fopen[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(coef_reload_input);Ii++)
		{
			LOAD(coef_reload_input[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(txt);Ii++)
		{
			LOAD(txt[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(r);Ii++)
		{
			LOAD(r[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(d);Ii++)
		{
			LOAD(d[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(din_int);Ii++)
		{
			LOAD(din_int[Ii])=PARAM(input_load); 
		}

		/*Retrieve Storage for output*/


	}
	else
	{
	}

	//Formating data for sending it to client
	int Ii;
	count=(int)PARAM(instance_id);

    for(Ii=0;Ii<PORT_SIZE(_file);Ii++)
    {
        if( INPUT_STATE(_file[Ii])==ZERO )
        {
            temp__file[Ii]=0;            }
        else
        {
            temp__file[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(fopen);Ii++)
    {
        if( INPUT_STATE(fopen[Ii])==ZERO )
        {
            temp_fopen[Ii]=0;            }
        else
        {
            temp_fopen[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(coef_reload_input);Ii++)
    {
        if( INPUT_STATE(coef_reload_input[Ii])==ZERO )
        {
            temp_coef_reload_input[Ii]=0;            }
        else
        {
            temp_coef_reload_input[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(txt);Ii++)
    {
        if( INPUT_STATE(txt[Ii])==ZERO )
        {
            temp_txt[Ii]=0;            }
        else
        {
            temp_txt[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(r);Ii++)
    {
        if( INPUT_STATE(r[Ii])==ZERO )
        {
            temp_r[Ii]=0;            }
        else
        {
            temp_r[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(d);Ii++)
    {
        if( INPUT_STATE(d[Ii])==ZERO )
        {
            temp_d[Ii]=0;            }
        else
        {
            temp_d[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(din_int);Ii++)
    {
        if( INPUT_STATE(din_int[Ii])==ZERO )
        {
            temp_din_int[Ii]=0;            }
        else
        {
            temp_din_int[Ii]=1;
        }
            }
	foocoef_reload_tb(1,count);


}