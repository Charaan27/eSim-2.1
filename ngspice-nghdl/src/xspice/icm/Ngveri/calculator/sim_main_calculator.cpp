/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vcalculator.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_astr[1024];
        extern "C" int port_astr;
        extern "C" int temp_res[1024];
        extern "C" int port_res;
        extern "C" int temp_seven_out[1024];
        extern "C" int port_seven_out;
        extern "C" int foocalculator(int,int);
        
        void int2arrcalculator(int  num, int array[], int n)
        {   
            for (int i = 0; i < n && num>=0; i++) 
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intcalculator(int array[],int n)
        {   
            int i,k=0;
            for (i = 0; i < n; i++) 
                k = 2 * k + array[i];
            return k;
        }
        
        int foocalculator(int init,int count) 
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vcalculator* calculator[1024];
            count--;
            if (init==0) 
            {
                calculator[count]=new Vcalculator{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============calculator : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("astr=%d\n", calculator[count] ->astr);
				printf("res=%d\n", calculator[count] ->res);
				printf("seven_out=%d\n", calculator[count] ->seven_out);
				calculator[count]->astr = arr2intcalculator(temp_astr, port_astr);
				calculator[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("astr=%d\n", calculator[count] ->astr);
				printf("res=%d\n", calculator[count] ->res);
				printf("seven_out=%d\n", calculator[count] ->seven_out);
				int2arrcalculator(calculator[count] -> res, temp_res, port_res);
				int2arrcalculator(calculator[count] -> seven_out, temp_seven_out, port_seven_out);

            }
            return 0;
        }