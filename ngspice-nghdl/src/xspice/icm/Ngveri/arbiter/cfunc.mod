/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

                
        #include <stdio.h>
        #include <math.h>
        #include <string.h>
        #include "sim_main_arbiter.h"

        
void cm_arbiter(ARGS) 
{
	Digital_State_t *_op_gnt3, *_op_gnt3_old;
	Digital_State_t *_op_gnt2, *_op_gnt2_old;
	Digital_State_t *_op_gnt1, *_op_gnt1_old;
	Digital_State_t *_op_gnt0, *_op_gnt0_old;

    static int inst_count=0;
    int count=0;
        
    if(INIT)
    {   
        inst_count++;
        PARAM(instance_id)=inst_count;
        fooarbiter(0,inst_count);
        /* Allocate storage for output ports and set the load for input ports */

        
        port_clk=PORT_SIZE(clk);

        port_rst=PORT_SIZE(rst);

        port_req3=PORT_SIZE(req3);

        port_req2=PORT_SIZE(req2);

        port_req1=PORT_SIZE(req1);

        port_req0=PORT_SIZE(req0);

        port_gnt3=PORT_SIZE(gnt3);

        port_gnt2=PORT_SIZE(gnt2);

        port_gnt1=PORT_SIZE(gnt1);

        port_gnt0=PORT_SIZE(gnt0);
		cm_event_alloc(0,1*sizeof(Digital_State_t));
		cm_event_alloc(1,1*sizeof(Digital_State_t));
		cm_event_alloc(2,1*sizeof(Digital_State_t));
		cm_event_alloc(3,1*sizeof(Digital_State_t));
		/* set the load for input ports. */
		int Ii;
		for(Ii=0;Ii<PORT_SIZE(clk);Ii++)
		{
			LOAD(clk[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(rst);Ii++)
		{
			LOAD(rst[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(req3);Ii++)
		{
			LOAD(req3[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(req2);Ii++)
		{
			LOAD(req2[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(req1);Ii++)
		{
			LOAD(req1[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(req0);Ii++)
		{
			LOAD(req0[Ii])=PARAM(input_load); 
		}

		/*Retrieve Storage for output*/
		_op_gnt3 = _op_gnt3_old = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_gnt2 = _op_gnt2_old = (Digital_State_t *) cm_event_get_ptr(1,0);
		_op_gnt1 = _op_gnt1_old = (Digital_State_t *) cm_event_get_ptr(2,0);
		_op_gnt0 = _op_gnt0_old = (Digital_State_t *) cm_event_get_ptr(3,0);


	}
	else
	{
		_op_gnt3 = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_gnt3_old = (Digital_State_t *) cm_event_get_ptr(0,1);
		_op_gnt2 = (Digital_State_t *) cm_event_get_ptr(1,1);
		_op_gnt2_old = (Digital_State_t *) cm_event_get_ptr(1,2);
		_op_gnt1 = (Digital_State_t *) cm_event_get_ptr(2,2);
		_op_gnt1_old = (Digital_State_t *) cm_event_get_ptr(2,3);
		_op_gnt0 = (Digital_State_t *) cm_event_get_ptr(3,3);
		_op_gnt0_old = (Digital_State_t *) cm_event_get_ptr(3,4);
	}

	//Formating data for sending it to client
	int Ii;
	count=(int)PARAM(instance_id);

    for(Ii=0;Ii<PORT_SIZE(clk);Ii++)
    {
        if( INPUT_STATE(clk[Ii])==ZERO )
        {
            temp_clk[Ii]=0;            }
        else
        {
            temp_clk[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(rst);Ii++)
    {
        if( INPUT_STATE(rst[Ii])==ZERO )
        {
            temp_rst[Ii]=0;            }
        else
        {
            temp_rst[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(req3);Ii++)
    {
        if( INPUT_STATE(req3[Ii])==ZERO )
        {
            temp_req3[Ii]=0;            }
        else
        {
            temp_req3[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(req2);Ii++)
    {
        if( INPUT_STATE(req2[Ii])==ZERO )
        {
            temp_req2[Ii]=0;            }
        else
        {
            temp_req2[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(req1);Ii++)
    {
        if( INPUT_STATE(req1[Ii])==ZERO )
        {
            temp_req1[Ii]=0;            }
        else
        {
            temp_req1[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(req0);Ii++)
    {
        if( INPUT_STATE(req0[Ii])==ZERO )
        {
            temp_req0[Ii]=0;            }
        else
        {
            temp_req0[Ii]=1;
        }
            }
	fooarbiter(1,count);

	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(gnt3);Ii++)
    {
        if(temp_gnt3[Ii]==0)
        {
            _op_gnt3[Ii]=ZERO;
            }
        else if(temp_gnt3[Ii]==1)
        {
            _op_gnt3[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(gnt3[Ii]) = _op_gnt3[Ii];
            }
        else if(_op_gnt3[Ii] != _op_gnt3_old[Ii])
        {
            OUTPUT_STATE(gnt3[Ii]) = _op_gnt3[Ii];
            OUTPUT_DELAY(gnt3[Ii]) = ((_op_gnt3[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(gnt3[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(gnt3[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(gnt2);Ii++)
    {
        if(temp_gnt2[Ii]==0)
        {
            _op_gnt2[Ii]=ZERO;
            }
        else if(temp_gnt2[Ii]==1)
        {
            _op_gnt2[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(gnt2[Ii]) = _op_gnt2[Ii];
            }
        else if(_op_gnt2[Ii] != _op_gnt2_old[Ii])
        {
            OUTPUT_STATE(gnt2[Ii]) = _op_gnt2[Ii];
            OUTPUT_DELAY(gnt2[Ii]) = ((_op_gnt2[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(gnt2[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(gnt2[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(gnt1);Ii++)
    {
        if(temp_gnt1[Ii]==0)
        {
            _op_gnt1[Ii]=ZERO;
            }
        else if(temp_gnt1[Ii]==1)
        {
            _op_gnt1[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(gnt1[Ii]) = _op_gnt1[Ii];
            }
        else if(_op_gnt1[Ii] != _op_gnt1_old[Ii])
        {
            OUTPUT_STATE(gnt1[Ii]) = _op_gnt1[Ii];
            OUTPUT_DELAY(gnt1[Ii]) = ((_op_gnt1[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(gnt1[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(gnt1[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(gnt0);Ii++)
    {
        if(temp_gnt0[Ii]==0)
        {
            _op_gnt0[Ii]=ZERO;
            }
        else if(temp_gnt0[Ii]==1)
        {
            _op_gnt0[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(gnt0[Ii]) = _op_gnt0[Ii];
            }
        else if(_op_gnt0[Ii] != _op_gnt0_old[Ii])
        {
            OUTPUT_STATE(gnt0[Ii]) = _op_gnt0[Ii];
            OUTPUT_DELAY(gnt0[Ii]) = ((_op_gnt0[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(gnt0[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(gnt0[Ii]) = STRONG;
    }

}