/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Varbiter.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_clk[1024];
        extern "C" int port_clk;
        extern "C" int temp_rst[1024];
        extern "C" int port_rst;
        extern "C" int temp_req3[1024];
        extern "C" int port_req3;
        extern "C" int temp_req2[1024];
        extern "C" int port_req2;
        extern "C" int temp_req1[1024];
        extern "C" int port_req1;
        extern "C" int temp_req0[1024];
        extern "C" int port_req0;
        extern "C" int temp_gnt3[1024];
        extern "C" int port_gnt3;
        extern "C" int temp_gnt2[1024];
        extern "C" int port_gnt2;
        extern "C" int temp_gnt1[1024];
        extern "C" int port_gnt1;
        extern "C" int temp_gnt0[1024];
        extern "C" int port_gnt0;
        extern "C" int fooarbiter(int,int);
        
        void int2arrarbiter(int  num, int array[], int n)
        {   
            for (int i = 0; i < n && num>=0; i++) 
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intarbiter(int array[],int n)
        {   
            int i,k=0;
            for (i = 0; i < n; i++) 
                k = 2 * k + array[i];
            return k;
        }
        
        int fooarbiter(int init,int count) 
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Varbiter* arbiter[1024];
            count--;
            if (init==0) 
            {
                arbiter[count]=new Varbiter{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============arbiter : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("clk=%d\n", arbiter[count] ->clk);
				printf("rst=%d\n", arbiter[count] ->rst);
				printf("req3=%d\n", arbiter[count] ->req3);
				printf("req2=%d\n", arbiter[count] ->req2);
				printf("req1=%d\n", arbiter[count] ->req1);
				printf("req0=%d\n", arbiter[count] ->req0);
				printf("gnt3=%d\n", arbiter[count] ->gnt3);
				printf("gnt2=%d\n", arbiter[count] ->gnt2);
				printf("gnt1=%d\n", arbiter[count] ->gnt1);
				printf("gnt0=%d\n", arbiter[count] ->gnt0);
				arbiter[count]->clk = arr2intarbiter(temp_clk, port_clk);
				arbiter[count]->rst = arr2intarbiter(temp_rst, port_rst);
				arbiter[count]->req3 = arr2intarbiter(temp_req3, port_req3);
				arbiter[count]->req2 = arr2intarbiter(temp_req2, port_req2);
				arbiter[count]->req1 = arr2intarbiter(temp_req1, port_req1);
				arbiter[count]->req0 = arr2intarbiter(temp_req0, port_req0);
				arbiter[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("clk=%d\n", arbiter[count] ->clk);
				printf("rst=%d\n", arbiter[count] ->rst);
				printf("req3=%d\n", arbiter[count] ->req3);
				printf("req2=%d\n", arbiter[count] ->req2);
				printf("req1=%d\n", arbiter[count] ->req1);
				printf("req0=%d\n", arbiter[count] ->req0);
				printf("gnt3=%d\n", arbiter[count] ->gnt3);
				printf("gnt2=%d\n", arbiter[count] ->gnt2);
				printf("gnt1=%d\n", arbiter[count] ->gnt1);
				printf("gnt0=%d\n", arbiter[count] ->gnt0);
				int2arrarbiter(arbiter[count] -> gnt3, temp_gnt3, port_gnt3);
				int2arrarbiter(arbiter[count] -> gnt2, temp_gnt2, port_gnt2);
				int2arrarbiter(arbiter[count] -> gnt1, temp_gnt1, port_gnt1);
				int2arrarbiter(arbiter[count] -> gnt0, temp_gnt0, port_gnt0);

            }
            return 0;
        }