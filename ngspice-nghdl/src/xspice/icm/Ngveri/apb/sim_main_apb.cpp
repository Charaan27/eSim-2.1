/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vapb.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_pclk[1024];
        extern "C" int port_pclk;
        extern "C" int temp_pwrite[1024];
        extern "C" int port_pwrite;
        extern "C" int temp_preset[1024];
        extern "C" int port_preset;
        extern "C" int temp_penable[1024];
        extern "C" int port_penable;
        extern "C" int temp_psel[1024];
        extern "C" int port_psel;
        extern "C" int temp_paddress[1024];
        extern "C" int port_paddress;
        extern "C" int temp_pwdata[1024];
        extern "C" int port_pwdata;
        extern "C" int temp_prdata[1024];
        extern "C" int port_prdata;
        extern "C" int temp_pready[1024];
        extern "C" int port_pready;
        extern "C" int fooapb(int,int);
        
        void int2arrapb(int  num, int array[], int n)
        {   
            for (int i = 0; i < n && num>=0; i++) 
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intapb(int array[],int n)
        {   
            int i,k=0;
            for (i = 0; i < n; i++) 
                k = 2 * k + array[i];
            return k;
        }
        
        int fooapb(int init,int count) 
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vapb* apb[1024];
            count--;
            if (init==0) 
            {
                apb[count]=new Vapb{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============apb : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("pclk=%d\n", apb[count] ->pclk);
				printf("pwrite=%d\n", apb[count] ->pwrite);
				printf("preset=%d\n", apb[count] ->preset);
				printf("penable=%d\n", apb[count] ->penable);
				printf("psel=%d\n", apb[count] ->psel);
				printf("paddress=%d\n", apb[count] ->paddress);
				printf("pwdata=%d\n", apb[count] ->pwdata);
				printf("prdata=%d\n", apb[count] ->prdata);
				printf("pready=%d\n", apb[count] ->pready);
				apb[count]->pclk = arr2intapb(temp_pclk, port_pclk);
				apb[count]->pwrite = arr2intapb(temp_pwrite, port_pwrite);
				apb[count]->preset = arr2intapb(temp_preset, port_preset);
				apb[count]->penable = arr2intapb(temp_penable, port_penable);
				apb[count]->psel = arr2intapb(temp_psel, port_psel);
				apb[count]->paddress = arr2intapb(temp_paddress, port_paddress);
				apb[count]->pwdata = arr2intapb(temp_pwdata, port_pwdata);
				apb[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("pclk=%d\n", apb[count] ->pclk);
				printf("pwrite=%d\n", apb[count] ->pwrite);
				printf("preset=%d\n", apb[count] ->preset);
				printf("penable=%d\n", apb[count] ->penable);
				printf("psel=%d\n", apb[count] ->psel);
				printf("paddress=%d\n", apb[count] ->paddress);
				printf("pwdata=%d\n", apb[count] ->pwdata);
				printf("prdata=%d\n", apb[count] ->prdata);
				printf("pready=%d\n", apb[count] ->pready);
				int2arrapb(apb[count] -> prdata, temp_prdata, port_prdata);
				int2arrapb(apb[count] -> pready, temp_pready, port_pready);

            }
            return 0;
        }