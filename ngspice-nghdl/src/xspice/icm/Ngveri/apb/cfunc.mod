/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

                
        #include <stdio.h>
        #include <math.h>
        #include <string.h>
        #include "sim_main_apb.h"

        
void cm_apb(ARGS) 
{
	Digital_State_t *_op_prdata, *_op_prdata_old;
	Digital_State_t *_op_pready, *_op_pready_old;

    static int inst_count=0;
    int count=0;
        
    if(INIT)
    {   
        inst_count++;
        PARAM(instance_id)=inst_count;
        fooapb(0,inst_count);
        /* Allocate storage for output ports and set the load for input ports */

        
        port_pclk=PORT_SIZE(pclk);

        port_pwrite=PORT_SIZE(pwrite);

        port_preset=PORT_SIZE(preset);

        port_penable=PORT_SIZE(penable);

        port_psel=PORT_SIZE(psel);

        port_paddress=PORT_SIZE(paddress);

        port_pwdata=PORT_SIZE(pwdata);

        port_prdata=PORT_SIZE(prdata);

        port_pready=PORT_SIZE(pready);
		cm_event_alloc(0,8*sizeof(Digital_State_t));
		cm_event_alloc(1,1*sizeof(Digital_State_t));
		/* set the load for input ports. */
		int Ii;
		for(Ii=0;Ii<PORT_SIZE(pclk);Ii++)
		{
			LOAD(pclk[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(pwrite);Ii++)
		{
			LOAD(pwrite[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(preset);Ii++)
		{
			LOAD(preset[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(penable);Ii++)
		{
			LOAD(penable[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(psel);Ii++)
		{
			LOAD(psel[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(paddress);Ii++)
		{
			LOAD(paddress[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(pwdata);Ii++)
		{
			LOAD(pwdata[Ii])=PARAM(input_load); 
		}

		/*Retrieve Storage for output*/
		_op_prdata = _op_prdata_old = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_pready = _op_pready_old = (Digital_State_t *) cm_event_get_ptr(1,0);


	}
	else
	{
		_op_prdata = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_prdata_old = (Digital_State_t *) cm_event_get_ptr(0,1);
		_op_pready = (Digital_State_t *) cm_event_get_ptr(1,1);
		_op_pready_old = (Digital_State_t *) cm_event_get_ptr(1,2);
	}

	//Formating data for sending it to client
	int Ii;
	count=(int)PARAM(instance_id);

    for(Ii=0;Ii<PORT_SIZE(pclk);Ii++)
    {
        if( INPUT_STATE(pclk[Ii])==ZERO )
        {
            temp_pclk[Ii]=0;            }
        else
        {
            temp_pclk[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(pwrite);Ii++)
    {
        if( INPUT_STATE(pwrite[Ii])==ZERO )
        {
            temp_pwrite[Ii]=0;            }
        else
        {
            temp_pwrite[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(preset);Ii++)
    {
        if( INPUT_STATE(preset[Ii])==ZERO )
        {
            temp_preset[Ii]=0;            }
        else
        {
            temp_preset[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(penable);Ii++)
    {
        if( INPUT_STATE(penable[Ii])==ZERO )
        {
            temp_penable[Ii]=0;            }
        else
        {
            temp_penable[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(psel);Ii++)
    {
        if( INPUT_STATE(psel[Ii])==ZERO )
        {
            temp_psel[Ii]=0;            }
        else
        {
            temp_psel[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(paddress);Ii++)
    {
        if( INPUT_STATE(paddress[Ii])==ZERO )
        {
            temp_paddress[Ii]=0;            }
        else
        {
            temp_paddress[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(pwdata);Ii++)
    {
        if( INPUT_STATE(pwdata[Ii])==ZERO )
        {
            temp_pwdata[Ii]=0;            }
        else
        {
            temp_pwdata[Ii]=1;
        }
            }
	fooapb(1,count);

	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(prdata);Ii++)
    {
        if(temp_prdata[Ii]==0)
        {
            _op_prdata[Ii]=ZERO;
            }
        else if(temp_prdata[Ii]==1)
        {
            _op_prdata[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(prdata[Ii]) = _op_prdata[Ii];
            }
        else if(_op_prdata[Ii] != _op_prdata_old[Ii])
        {
            OUTPUT_STATE(prdata[Ii]) = _op_prdata[Ii];
            OUTPUT_DELAY(prdata[Ii]) = ((_op_prdata[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(prdata[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(prdata[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(pready);Ii++)
    {
        if(temp_pready[Ii]==0)
        {
            _op_pready[Ii]=ZERO;
            }
        else if(temp_pready[Ii]==1)
        {
            _op_pready[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(pready[Ii]) = _op_pready[Ii];
            }
        else if(_op_pready[Ii] != _op_pready_old[Ii])
        {
            OUTPUT_STATE(pready[Ii]) = _op_pready[Ii];
            OUTPUT_DELAY(pready[Ii]) = ((_op_pready[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(pready[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(pready[Ii]) = STRONG;
    }

}