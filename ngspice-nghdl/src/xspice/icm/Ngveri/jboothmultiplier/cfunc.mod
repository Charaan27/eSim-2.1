/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

                
        #include <stdio.h>
        #include <math.h>
        #include <string.h>
        #include "sim_main_jboothmultiplier.h"

        
void cm_jboothmultiplier(ARGS) 
{
	Digital_State_t *_op_PRODUCT, *_op_PRODUCT_old;

    static int inst_count=0;
    int count=0;
        
    if(INIT)
    {   
        inst_count++;
        PARAM(instance_id)=inst_count;
        foojboothmultiplier(0,inst_count);
        /* Allocate storage for output ports and set the load for input ports */

        
        port_A=PORT_SIZE(A);

        port_B=PORT_SIZE(B);

        port_PRODUCT=PORT_SIZE(PRODUCT);
		cm_event_alloc(0,8*sizeof(Digital_State_t));
		/* set the load for input ports. */
		int Ii;
		for(Ii=0;Ii<PORT_SIZE(A);Ii++)
		{
			LOAD(A[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(B);Ii++)
		{
			LOAD(B[Ii])=PARAM(input_load); 
		}

		/*Retrieve Storage for output*/
		_op_PRODUCT = _op_PRODUCT_old = (Digital_State_t *) cm_event_get_ptr(0,0);


	}
	else
	{
		_op_PRODUCT = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_PRODUCT_old = (Digital_State_t *) cm_event_get_ptr(0,1);
	}

	//Formating data for sending it to client
	int Ii;
	count=(int)PARAM(instance_id);

    for(Ii=0;Ii<PORT_SIZE(A);Ii++)
    {
        if( INPUT_STATE(A[Ii])==ZERO )
        {
            temp_A[Ii]=0;            }
        else
        {
            temp_A[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(B);Ii++)
    {
        if( INPUT_STATE(B[Ii])==ZERO )
        {
            temp_B[Ii]=0;            }
        else
        {
            temp_B[Ii]=1;
        }
            }
	foojboothmultiplier(1,count);

	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(PRODUCT);Ii++)
    {
        if(temp_PRODUCT[Ii]==0)
        {
            _op_PRODUCT[Ii]=ZERO;
            }
        else if(temp_PRODUCT[Ii]==1)
        {
            _op_PRODUCT[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(PRODUCT[Ii]) = _op_PRODUCT[Ii];
            }
        else if(_op_PRODUCT[Ii] != _op_PRODUCT_old[Ii])
        {
            OUTPUT_STATE(PRODUCT[Ii]) = _op_PRODUCT[Ii];
            OUTPUT_DELAY(PRODUCT[Ii]) = ((_op_PRODUCT[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(PRODUCT[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(PRODUCT[Ii]) = STRONG;
    }

}