/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

                
        #include <stdio.h>
        #include <math.h>
        #include <string.h>
        #include "sim_main_fir91.h"

        
void cm_fir91(ARGS) 
{
	Digital_State_t *_op_ast_source_data, *_op_ast_source_data_old;
	Digital_State_t *_op_ast_sink_ready, *_op_ast_sink_ready_old;
	Digital_State_t *_op_ast_source_valid, *_op_ast_source_valid_old;
	Digital_State_t *_op_ast_source_error, *_op_ast_source_error_old;

    static int inst_count=0;
    int count=0;
        
    if(INIT)
    {   
        inst_count++;
        PARAM(instance_id)=inst_count;
        foofir91(0,inst_count);
        /* Allocate storage for output ports and set the load for input ports */

        
        port_clk=PORT_SIZE(clk);

        port_reset_n=PORT_SIZE(reset_n);

        port_ast_sink_data=PORT_SIZE(ast_sink_data);

        port_coef_set=PORT_SIZE(coef_set);

        port_ast_sink_valid=PORT_SIZE(ast_sink_valid);

        port_ast_source_ready=PORT_SIZE(ast_source_ready);

        port_ast_sink_error=PORT_SIZE(ast_sink_error);

        port_coef_set_in=PORT_SIZE(coef_set_in);

        port_coef_we=PORT_SIZE(coef_we);

        port_coef_in=PORT_SIZE(coef_in);

        port_ast_source_data=PORT_SIZE(ast_source_data);

        port_ast_sink_ready=PORT_SIZE(ast_sink_ready);

        port_ast_source_valid=PORT_SIZE(ast_source_valid);

        port_ast_source_error=PORT_SIZE(ast_source_error);
		cm_event_alloc(0,38*sizeof(Digital_State_t));
		cm_event_alloc(1,1*sizeof(Digital_State_t));
		cm_event_alloc(2,1*sizeof(Digital_State_t));
		cm_event_alloc(3,2*sizeof(Digital_State_t));
		/* set the load for input ports. */
		int Ii;
		for(Ii=0;Ii<PORT_SIZE(clk);Ii++)
		{
			LOAD(clk[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(reset_n);Ii++)
		{
			LOAD(reset_n[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(ast_sink_data);Ii++)
		{
			LOAD(ast_sink_data[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(coef_set);Ii++)
		{
			LOAD(coef_set[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(ast_sink_valid);Ii++)
		{
			LOAD(ast_sink_valid[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(ast_source_ready);Ii++)
		{
			LOAD(ast_source_ready[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(ast_sink_error);Ii++)
		{
			LOAD(ast_sink_error[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(coef_set_in);Ii++)
		{
			LOAD(coef_set_in[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(coef_we);Ii++)
		{
			LOAD(coef_we[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(coef_in);Ii++)
		{
			LOAD(coef_in[Ii])=PARAM(input_load); 
		}

		/*Retrieve Storage for output*/
		_op_ast_source_data = _op_ast_source_data_old = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_ast_sink_ready = _op_ast_sink_ready_old = (Digital_State_t *) cm_event_get_ptr(1,0);
		_op_ast_source_valid = _op_ast_source_valid_old = (Digital_State_t *) cm_event_get_ptr(2,0);
		_op_ast_source_error = _op_ast_source_error_old = (Digital_State_t *) cm_event_get_ptr(3,0);


	}
	else
	{
		_op_ast_source_data = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_ast_source_data_old = (Digital_State_t *) cm_event_get_ptr(0,1);
		_op_ast_sink_ready = (Digital_State_t *) cm_event_get_ptr(1,1);
		_op_ast_sink_ready_old = (Digital_State_t *) cm_event_get_ptr(1,2);
		_op_ast_source_valid = (Digital_State_t *) cm_event_get_ptr(2,2);
		_op_ast_source_valid_old = (Digital_State_t *) cm_event_get_ptr(2,3);
		_op_ast_source_error = (Digital_State_t *) cm_event_get_ptr(3,3);
		_op_ast_source_error_old = (Digital_State_t *) cm_event_get_ptr(3,4);
	}

	//Formating data for sending it to client
	int Ii;
	count=(int)PARAM(instance_id);

    for(Ii=0;Ii<PORT_SIZE(clk);Ii++)
    {
        if( INPUT_STATE(clk[Ii])==ZERO )
        {
            temp_clk[Ii]=0;            }
        else
        {
            temp_clk[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(reset_n);Ii++)
    {
        if( INPUT_STATE(reset_n[Ii])==ZERO )
        {
            temp_reset_n[Ii]=0;            }
        else
        {
            temp_reset_n[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(ast_sink_data);Ii++)
    {
        if( INPUT_STATE(ast_sink_data[Ii])==ZERO )
        {
            temp_ast_sink_data[Ii]=0;            }
        else
        {
            temp_ast_sink_data[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(coef_set);Ii++)
    {
        if( INPUT_STATE(coef_set[Ii])==ZERO )
        {
            temp_coef_set[Ii]=0;            }
        else
        {
            temp_coef_set[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(ast_sink_valid);Ii++)
    {
        if( INPUT_STATE(ast_sink_valid[Ii])==ZERO )
        {
            temp_ast_sink_valid[Ii]=0;            }
        else
        {
            temp_ast_sink_valid[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(ast_source_ready);Ii++)
    {
        if( INPUT_STATE(ast_source_ready[Ii])==ZERO )
        {
            temp_ast_source_ready[Ii]=0;            }
        else
        {
            temp_ast_source_ready[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(ast_sink_error);Ii++)
    {
        if( INPUT_STATE(ast_sink_error[Ii])==ZERO )
        {
            temp_ast_sink_error[Ii]=0;            }
        else
        {
            temp_ast_sink_error[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(coef_set_in);Ii++)
    {
        if( INPUT_STATE(coef_set_in[Ii])==ZERO )
        {
            temp_coef_set_in[Ii]=0;            }
        else
        {
            temp_coef_set_in[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(coef_we);Ii++)
    {
        if( INPUT_STATE(coef_we[Ii])==ZERO )
        {
            temp_coef_we[Ii]=0;            }
        else
        {
            temp_coef_we[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(coef_in);Ii++)
    {
        if( INPUT_STATE(coef_in[Ii])==ZERO )
        {
            temp_coef_in[Ii]=0;            }
        else
        {
            temp_coef_in[Ii]=1;
        }
            }
	foofir91(1,count);

	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(ast_source_data);Ii++)
    {
        if(temp_ast_source_data[Ii]==0)
        {
            _op_ast_source_data[Ii]=ZERO;
            }
        else if(temp_ast_source_data[Ii]==1)
        {
            _op_ast_source_data[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(ast_source_data[Ii]) = _op_ast_source_data[Ii];
            }
        else if(_op_ast_source_data[Ii] != _op_ast_source_data_old[Ii])
        {
            OUTPUT_STATE(ast_source_data[Ii]) = _op_ast_source_data[Ii];
            OUTPUT_DELAY(ast_source_data[Ii]) = ((_op_ast_source_data[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(ast_source_data[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(ast_source_data[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(ast_sink_ready);Ii++)
    {
        if(temp_ast_sink_ready[Ii]==0)
        {
            _op_ast_sink_ready[Ii]=ZERO;
            }
        else if(temp_ast_sink_ready[Ii]==1)
        {
            _op_ast_sink_ready[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(ast_sink_ready[Ii]) = _op_ast_sink_ready[Ii];
            }
        else if(_op_ast_sink_ready[Ii] != _op_ast_sink_ready_old[Ii])
        {
            OUTPUT_STATE(ast_sink_ready[Ii]) = _op_ast_sink_ready[Ii];
            OUTPUT_DELAY(ast_sink_ready[Ii]) = ((_op_ast_sink_ready[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(ast_sink_ready[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(ast_sink_ready[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(ast_source_valid);Ii++)
    {
        if(temp_ast_source_valid[Ii]==0)
        {
            _op_ast_source_valid[Ii]=ZERO;
            }
        else if(temp_ast_source_valid[Ii]==1)
        {
            _op_ast_source_valid[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(ast_source_valid[Ii]) = _op_ast_source_valid[Ii];
            }
        else if(_op_ast_source_valid[Ii] != _op_ast_source_valid_old[Ii])
        {
            OUTPUT_STATE(ast_source_valid[Ii]) = _op_ast_source_valid[Ii];
            OUTPUT_DELAY(ast_source_valid[Ii]) = ((_op_ast_source_valid[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(ast_source_valid[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(ast_source_valid[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(ast_source_error);Ii++)
    {
        if(temp_ast_source_error[Ii]==0)
        {
            _op_ast_source_error[Ii]=ZERO;
            }
        else if(temp_ast_source_error[Ii]==1)
        {
            _op_ast_source_error[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(ast_source_error[Ii]) = _op_ast_source_error[Ii];
            }
        else if(_op_ast_source_error[Ii] != _op_ast_source_error_old[Ii])
        {
            OUTPUT_STATE(ast_source_error[Ii]) = _op_ast_source_error[Ii];
            OUTPUT_DELAY(ast_source_error[Ii]) = ((_op_ast_source_error[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(ast_source_error[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(ast_source_error[Ii]) = STRONG;
    }

}