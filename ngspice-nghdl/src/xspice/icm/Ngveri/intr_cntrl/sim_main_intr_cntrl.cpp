/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vintr_cntrl.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_clk_in[1024];
        extern "C" int port_clk_in;
        extern "C" int temp_rst_in[1024];
        extern "C" int port_rst_in;
        extern "C" int temp_intr_rq[1024];
        extern "C" int port_intr_rq;
        extern "C" int temp_intr_bus[1024];
        extern "C" int port_intr_bus;
        extern "C" int temp_intr_in[1024];
        extern "C" int port_intr_in;
        extern "C" int temp_intr_out[1024];
        extern "C" int port_intr_out;
        extern "C" int temp_bus_oe[1024];
        extern "C" int port_bus_oe;
        extern "C" int foointr_cntrl(int,int);
        
        void int2arrintr_cntrl(int  num, int array[], int n)
        {   
            for (int i = 0; i < n && num>=0; i++) 
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intintr_cntrl(int array[],int n)
        {   
            int i,k=0;
            for (i = 0; i < n; i++) 
                k = 2 * k + array[i];
            return k;
        }
        
        int foointr_cntrl(int init,int count) 
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vintr_cntrl* intr_cntrl[1024];
            count--;
            if (init==0) 
            {
                intr_cntrl[count]=new Vintr_cntrl{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============intr_cntrl : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("clk_in=%d\n", intr_cntrl[count] ->clk_in);
				printf("rst_in=%d\n", intr_cntrl[count] ->rst_in);
				printf("intr_rq=%d\n", intr_cntrl[count] ->intr_rq);
				printf("intr_bus=%d\n", intr_cntrl[count] ->intr_bus);
				printf("intr_in=%d\n", intr_cntrl[count] ->intr_in);
				printf("intr_out=%d\n", intr_cntrl[count] ->intr_out);
				printf("bus_oe=%d\n", intr_cntrl[count] ->bus_oe);
				intr_cntrl[count]->clk_in = arr2intintr_cntrl(temp_clk_in, port_clk_in);
				intr_cntrl[count]->rst_in = arr2intintr_cntrl(temp_rst_in, port_rst_in);
				intr_cntrl[count]->intr_rq = arr2intintr_cntrl(temp_intr_rq, port_intr_rq);
				intr_cntrl[count]->intr_bus = arr2intintr_cntrl(temp_intr_bus, port_intr_bus);
				intr_cntrl[count]->intr_in = arr2intintr_cntrl(temp_intr_in, port_intr_in);
				intr_cntrl[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("clk_in=%d\n", intr_cntrl[count] ->clk_in);
				printf("rst_in=%d\n", intr_cntrl[count] ->rst_in);
				printf("intr_rq=%d\n", intr_cntrl[count] ->intr_rq);
				printf("intr_bus=%d\n", intr_cntrl[count] ->intr_bus);
				printf("intr_in=%d\n", intr_cntrl[count] ->intr_in);
				printf("intr_out=%d\n", intr_cntrl[count] ->intr_out);
				printf("bus_oe=%d\n", intr_cntrl[count] ->bus_oe);
				int2arrintr_cntrl(intr_cntrl[count] -> intr_out, temp_intr_out, port_intr_out);
				int2arrintr_cntrl(intr_cntrl[count] -> bus_oe, temp_bus_oe, port_bus_oe);

            }
            return 0;
        }