/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

                
        #include <stdio.h>
        #include <math.h>
        #include <string.h>
        #include "sim_main_intr_cntrl.h"

        
void cm_intr_cntrl(ARGS) 
{
	Digital_State_t *_op_intr_out, *_op_intr_out_old;
	Digital_State_t *_op_bus_oe, *_op_bus_oe_old;

    static int inst_count=0;
    int count=0;
        
    if(INIT)
    {   
        inst_count++;
        PARAM(instance_id)=inst_count;
        foointr_cntrl(0,inst_count);
        /* Allocate storage for output ports and set the load for input ports */

        
        port_clk_in=PORT_SIZE(clk_in);

        port_rst_in=PORT_SIZE(rst_in);

        port_intr_rq=PORT_SIZE(intr_rq);

        port_intr_bus=PORT_SIZE(intr_bus);

        port_intr_in=PORT_SIZE(intr_in);

        port_intr_out=PORT_SIZE(intr_out);

        port_bus_oe=PORT_SIZE(bus_oe);
		cm_event_alloc(0,1*sizeof(Digital_State_t));
		cm_event_alloc(1,1*sizeof(Digital_State_t));
		/* set the load for input ports. */
		int Ii;
		for(Ii=0;Ii<PORT_SIZE(clk_in);Ii++)
		{
			LOAD(clk_in[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(rst_in);Ii++)
		{
			LOAD(rst_in[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(intr_rq);Ii++)
		{
			LOAD(intr_rq[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(intr_bus);Ii++)
		{
			LOAD(intr_bus[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(intr_in);Ii++)
		{
			LOAD(intr_in[Ii])=PARAM(input_load); 
		}

		/*Retrieve Storage for output*/
		_op_intr_out = _op_intr_out_old = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_bus_oe = _op_bus_oe_old = (Digital_State_t *) cm_event_get_ptr(1,0);


	}
	else
	{
		_op_intr_out = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_intr_out_old = (Digital_State_t *) cm_event_get_ptr(0,1);
		_op_bus_oe = (Digital_State_t *) cm_event_get_ptr(1,1);
		_op_bus_oe_old = (Digital_State_t *) cm_event_get_ptr(1,2);
	}

	//Formating data for sending it to client
	int Ii;
	count=(int)PARAM(instance_id);

    for(Ii=0;Ii<PORT_SIZE(clk_in);Ii++)
    {
        if( INPUT_STATE(clk_in[Ii])==ZERO )
        {
            temp_clk_in[Ii]=0;            }
        else
        {
            temp_clk_in[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(rst_in);Ii++)
    {
        if( INPUT_STATE(rst_in[Ii])==ZERO )
        {
            temp_rst_in[Ii]=0;            }
        else
        {
            temp_rst_in[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(intr_rq);Ii++)
    {
        if( INPUT_STATE(intr_rq[Ii])==ZERO )
        {
            temp_intr_rq[Ii]=0;            }
        else
        {
            temp_intr_rq[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(intr_bus);Ii++)
    {
        if( INPUT_STATE(intr_bus[Ii])==ZERO )
        {
            temp_intr_bus[Ii]=0;            }
        else
        {
            temp_intr_bus[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(intr_in);Ii++)
    {
        if( INPUT_STATE(intr_in[Ii])==ZERO )
        {
            temp_intr_in[Ii]=0;            }
        else
        {
            temp_intr_in[Ii]=1;
        }
            }
	foointr_cntrl(1,count);

	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(intr_out);Ii++)
    {
        if(temp_intr_out[Ii]==0)
        {
            _op_intr_out[Ii]=ZERO;
            }
        else if(temp_intr_out[Ii]==1)
        {
            _op_intr_out[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(intr_out[Ii]) = _op_intr_out[Ii];
            }
        else if(_op_intr_out[Ii] != _op_intr_out_old[Ii])
        {
            OUTPUT_STATE(intr_out[Ii]) = _op_intr_out[Ii];
            OUTPUT_DELAY(intr_out[Ii]) = ((_op_intr_out[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(intr_out[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(intr_out[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(bus_oe);Ii++)
    {
        if(temp_bus_oe[Ii]==0)
        {
            _op_bus_oe[Ii]=ZERO;
            }
        else if(temp_bus_oe[Ii]==1)
        {
            _op_bus_oe[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(bus_oe[Ii]) = _op_bus_oe[Ii];
            }
        else if(_op_bus_oe[Ii] != _op_bus_oe_old[Ii])
        {
            OUTPUT_STATE(bus_oe[Ii]) = _op_bus_oe[Ii];
            OUTPUT_DELAY(bus_oe[Ii]) = ((_op_bus_oe[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(bus_oe[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(bus_oe[Ii]) = STRONG;
    }

}