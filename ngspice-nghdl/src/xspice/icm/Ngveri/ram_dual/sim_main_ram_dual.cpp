/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vram_dual.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_data[1024];
        extern "C" int port_data;
        extern "C" int temp_read_addr[1024];
        extern "C" int port_read_addr;
        extern "C" int temp_write_addr[1024];
        extern "C" int port_write_addr;
        extern "C" int temp_we[1024];
        extern "C" int port_we;
        extern "C" int temp_read_clock[1024];
        extern "C" int port_read_clock;
        extern "C" int temp_write_clock[1024];
        extern "C" int port_write_clock;
        extern "C" int temp_q[1024];
        extern "C" int port_q;
        extern "C" int fooram_dual(int,int);
        
        void int2arrram_dual(int  num, int array[], int n)
        {   
            for (int i = 0; i < n && num>=0; i++) 
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intram_dual(int array[],int n)
        {   
            int i,k=0;
            for (i = 0; i < n; i++) 
                k = 2 * k + array[i];
            return k;
        }
        
        int fooram_dual(int init,int count) 
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vram_dual* ram_dual[1024];
            count--;
            if (init==0) 
            {
                ram_dual[count]=new Vram_dual{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============ram_dual : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("data=%d\n", ram_dual[count] ->data);
				printf("read_addr=%d\n", ram_dual[count] ->read_addr);
				printf("write_addr=%d\n", ram_dual[count] ->write_addr);
				printf("we=%d\n", ram_dual[count] ->we);
				printf("read_clock=%d\n", ram_dual[count] ->read_clock);
				printf("write_clock=%d\n", ram_dual[count] ->write_clock);
				printf("q=%d\n", ram_dual[count] ->q);
				ram_dual[count]->data = arr2intram_dual(temp_data, port_data);
				ram_dual[count]->read_addr = arr2intram_dual(temp_read_addr, port_read_addr);
				ram_dual[count]->write_addr = arr2intram_dual(temp_write_addr, port_write_addr);
				ram_dual[count]->we = arr2intram_dual(temp_we, port_we);
				ram_dual[count]->read_clock = arr2intram_dual(temp_read_clock, port_read_clock);
				ram_dual[count]->write_clock = arr2intram_dual(temp_write_clock, port_write_clock);
				ram_dual[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("data=%d\n", ram_dual[count] ->data);
				printf("read_addr=%d\n", ram_dual[count] ->read_addr);
				printf("write_addr=%d\n", ram_dual[count] ->write_addr);
				printf("we=%d\n", ram_dual[count] ->we);
				printf("read_clock=%d\n", ram_dual[count] ->read_clock);
				printf("write_clock=%d\n", ram_dual[count] ->write_clock);
				printf("q=%d\n", ram_dual[count] ->q);
				int2arrram_dual(ram_dual[count] -> q, temp_q, port_q);

            }
            return 0;
        }