/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

                
        #include <stdio.h>
        #include <math.h>
        #include <string.h>
        #include "sim_main_ram_dual.h"

        
void cm_ram_dual(ARGS) 
{
	Digital_State_t *_op_q, *_op_q_old;

    static int inst_count=0;
    int count=0;
        
    if(INIT)
    {   
        inst_count++;
        PARAM(instance_id)=inst_count;
        fooram_dual(0,inst_count);
        /* Allocate storage for output ports and set the load for input ports */

        
        port_data=PORT_SIZE(data);

        port_read_addr=PORT_SIZE(read_addr);

        port_write_addr=PORT_SIZE(write_addr);

        port_we=PORT_SIZE(we);

        port_read_clock=PORT_SIZE(read_clock);

        port_write_clock=PORT_SIZE(write_clock);

        port_q=PORT_SIZE(q);
		cm_event_alloc(0,8*sizeof(Digital_State_t));
		/* set the load for input ports. */
		int Ii;
		for(Ii=0;Ii<PORT_SIZE(data);Ii++)
		{
			LOAD(data[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(read_addr);Ii++)
		{
			LOAD(read_addr[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(write_addr);Ii++)
		{
			LOAD(write_addr[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(we);Ii++)
		{
			LOAD(we[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(read_clock);Ii++)
		{
			LOAD(read_clock[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(write_clock);Ii++)
		{
			LOAD(write_clock[Ii])=PARAM(input_load); 
		}

		/*Retrieve Storage for output*/
		_op_q = _op_q_old = (Digital_State_t *) cm_event_get_ptr(0,0);


	}
	else
	{
		_op_q = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_q_old = (Digital_State_t *) cm_event_get_ptr(0,1);
	}

	//Formating data for sending it to client
	int Ii;
	count=(int)PARAM(instance_id);

    for(Ii=0;Ii<PORT_SIZE(data);Ii++)
    {
        if( INPUT_STATE(data[Ii])==ZERO )
        {
            temp_data[Ii]=0;            }
        else
        {
            temp_data[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(read_addr);Ii++)
    {
        if( INPUT_STATE(read_addr[Ii])==ZERO )
        {
            temp_read_addr[Ii]=0;            }
        else
        {
            temp_read_addr[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(write_addr);Ii++)
    {
        if( INPUT_STATE(write_addr[Ii])==ZERO )
        {
            temp_write_addr[Ii]=0;            }
        else
        {
            temp_write_addr[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(we);Ii++)
    {
        if( INPUT_STATE(we[Ii])==ZERO )
        {
            temp_we[Ii]=0;            }
        else
        {
            temp_we[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(read_clock);Ii++)
    {
        if( INPUT_STATE(read_clock[Ii])==ZERO )
        {
            temp_read_clock[Ii]=0;            }
        else
        {
            temp_read_clock[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(write_clock);Ii++)
    {
        if( INPUT_STATE(write_clock[Ii])==ZERO )
        {
            temp_write_clock[Ii]=0;            }
        else
        {
            temp_write_clock[Ii]=1;
        }
            }
	fooram_dual(1,count);

	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(q);Ii++)
    {
        if(temp_q[Ii]==0)
        {
            _op_q[Ii]=ZERO;
            }
        else if(temp_q[Ii]==1)
        {
            _op_q[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(q[Ii]) = _op_q[Ii];
            }
        else if(_op_q[Ii] != _op_q_old[Ii])
        {
            OUTPUT_STATE(q[Ii]) = _op_q[Ii];
            OUTPUT_DELAY(q[Ii]) = ((_op_q[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(q[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(q[Ii]) = STRONG;
    }

}