/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

                
        #include <stdio.h>
        #include <math.h>
        #include <string.h>
        #include "sim_main_ixorxnor.h"

        
void cm_ixorxnor(ARGS) 
{
	Digital_State_t *_op_yXOR, *_op_yXOR_old;
	Digital_State_t *_op_yXNOR, *_op_yXNOR_old;

    static int inst_count=0;
    int count=0;
        
    if(INIT)
    {   
        inst_count++;
        PARAM(instance_id)=inst_count;
        fooixorxnor(0,inst_count);
        /* Allocate storage for output ports and set the load for input ports */

        
        port_a=PORT_SIZE(a);

        port_b=PORT_SIZE(b);

        port_yXOR=PORT_SIZE(yXOR);

        port_yXNOR=PORT_SIZE(yXNOR);
		cm_event_alloc(0,1*sizeof(Digital_State_t));
		cm_event_alloc(1,1*sizeof(Digital_State_t));
		/* set the load for input ports. */
		int Ii;
		for(Ii=0;Ii<PORT_SIZE(a);Ii++)
		{
			LOAD(a[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(b);Ii++)
		{
			LOAD(b[Ii])=PARAM(input_load); 
		}

		/*Retrieve Storage for output*/
		_op_yXOR = _op_yXOR_old = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_yXNOR = _op_yXNOR_old = (Digital_State_t *) cm_event_get_ptr(1,0);


	}
	else
	{
		_op_yXOR = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_yXOR_old = (Digital_State_t *) cm_event_get_ptr(0,1);
		_op_yXNOR = (Digital_State_t *) cm_event_get_ptr(1,1);
		_op_yXNOR_old = (Digital_State_t *) cm_event_get_ptr(1,2);
	}

	//Formating data for sending it to client
	int Ii;
	count=(int)PARAM(instance_id);

    for(Ii=0;Ii<PORT_SIZE(a);Ii++)
    {
        if( INPUT_STATE(a[Ii])==ZERO )
        {
            temp_a[Ii]=0;            }
        else
        {
            temp_a[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(b);Ii++)
    {
        if( INPUT_STATE(b[Ii])==ZERO )
        {
            temp_b[Ii]=0;            }
        else
        {
            temp_b[Ii]=1;
        }
            }
	fooixorxnor(1,count);

	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(yXOR);Ii++)
    {
        if(temp_yXOR[Ii]==0)
        {
            _op_yXOR[Ii]=ZERO;
            }
        else if(temp_yXOR[Ii]==1)
        {
            _op_yXOR[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(yXOR[Ii]) = _op_yXOR[Ii];
            }
        else if(_op_yXOR[Ii] != _op_yXOR_old[Ii])
        {
            OUTPUT_STATE(yXOR[Ii]) = _op_yXOR[Ii];
            OUTPUT_DELAY(yXOR[Ii]) = ((_op_yXOR[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(yXOR[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(yXOR[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(yXNOR);Ii++)
    {
        if(temp_yXNOR[Ii]==0)
        {
            _op_yXNOR[Ii]=ZERO;
            }
        else if(temp_yXNOR[Ii]==1)
        {
            _op_yXNOR[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(yXNOR[Ii]) = _op_yXNOR[Ii];
            }
        else if(_op_yXNOR[Ii] != _op_yXNOR_old[Ii])
        {
            OUTPUT_STATE(yXNOR[Ii]) = _op_yXNOR[Ii];
            OUTPUT_DELAY(yXNOR[Ii]) = ((_op_yXNOR[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(yXNOR[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(yXNOR[Ii]) = STRONG;
    }

}