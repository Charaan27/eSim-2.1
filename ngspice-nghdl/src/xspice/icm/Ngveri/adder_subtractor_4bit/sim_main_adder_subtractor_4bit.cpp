/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vadder_subtractor_4bit.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_a[1024];
        extern "C" int port_a;
        extern "C" int temp_b[1024];
        extern "C" int port_b;
        extern "C" int temp_cin[1024];
        extern "C" int port_cin;
        extern "C" int temp_sum[1024];
        extern "C" int port_sum;
        extern "C" int temp_carry[1024];
        extern "C" int port_carry;
        extern "C" int fooadder_subtractor_4bit(int,int);
        
        void int2arradder_subtractor_4bit(int  num, int array[], int n)
        {   
            for (int i = 0; i < n && num>=0; i++) 
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intadder_subtractor_4bit(int array[],int n)
        {   
            int i,k=0;
            for (i = 0; i < n; i++) 
                k = 2 * k + array[i];
            return k;
        }
        
        int fooadder_subtractor_4bit(int init,int count) 
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vadder_subtractor_4bit* adder_subtractor_4bit[1024];
            count--;
            if (init==0) 
            {
                adder_subtractor_4bit[count]=new Vadder_subtractor_4bit{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============adder_subtractor_4bit : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("a=%d\n", adder_subtractor_4bit[count] ->a);
				printf("b=%d\n", adder_subtractor_4bit[count] ->b);
				printf("cin=%d\n", adder_subtractor_4bit[count] ->cin);
				printf("sum=%d\n", adder_subtractor_4bit[count] ->sum);
				printf("carry=%d\n", adder_subtractor_4bit[count] ->carry);
				adder_subtractor_4bit[count]->a = arr2intadder_subtractor_4bit(temp_a, port_a);
				adder_subtractor_4bit[count]->b = arr2intadder_subtractor_4bit(temp_b, port_b);
				adder_subtractor_4bit[count]->cin = arr2intadder_subtractor_4bit(temp_cin, port_cin);
				adder_subtractor_4bit[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("a=%d\n", adder_subtractor_4bit[count] ->a);
				printf("b=%d\n", adder_subtractor_4bit[count] ->b);
				printf("cin=%d\n", adder_subtractor_4bit[count] ->cin);
				printf("sum=%d\n", adder_subtractor_4bit[count] ->sum);
				printf("carry=%d\n", adder_subtractor_4bit[count] ->carry);
				int2arradder_subtractor_4bit(adder_subtractor_4bit[count] -> sum, temp_sum, port_sum);
				int2arradder_subtractor_4bit(adder_subtractor_4bit[count] -> carry, temp_carry, port_carry);

            }
            return 0;
        }