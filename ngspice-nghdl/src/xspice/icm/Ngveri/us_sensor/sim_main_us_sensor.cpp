/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vus_sensor.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_clk[1024];
        extern "C" int port_clk;
        extern "C" int temp_echo[1024];
        extern "C" int port_echo;
        extern "C" int temp_atrigger[1024];
        extern "C" int port_atrigger;
        extern "C" int temp_ss[1024];
        extern "C" int port_ss;
        extern "C" int temp_en[1024];
        extern "C" int port_en;
        extern "C" int foous_sensor(int,int);
        
        void int2arrus_sensor(int  num, int array[], int n)
        {   
            for (int i = 0; i < n && num>=0; i++) 
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intus_sensor(int array[],int n)
        {   
            int i,k=0;
            for (i = 0; i < n; i++) 
                k = 2 * k + array[i];
            return k;
        }
        
        int foous_sensor(int init,int count) 
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vus_sensor* us_sensor[1024];
            count--;
            if (init==0) 
            {
                us_sensor[count]=new Vus_sensor{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============us_sensor : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("clk=%d\n", us_sensor[count] ->clk);
				printf("echo=%d\n", us_sensor[count] ->echo);
				printf("atrigger=%d\n", us_sensor[count] ->atrigger);
				printf("ss=%d\n", us_sensor[count] ->ss);
				printf("en=%d\n", us_sensor[count] ->en);
				us_sensor[count]->clk = arr2intus_sensor(temp_clk, port_clk);
				us_sensor[count]->echo = arr2intus_sensor(temp_echo, port_echo);
				us_sensor[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("clk=%d\n", us_sensor[count] ->clk);
				printf("echo=%d\n", us_sensor[count] ->echo);
				printf("atrigger=%d\n", us_sensor[count] ->atrigger);
				printf("ss=%d\n", us_sensor[count] ->ss);
				printf("en=%d\n", us_sensor[count] ->en);
				int2arrus_sensor(us_sensor[count] -> atrigger, temp_atrigger, port_atrigger);
				int2arrus_sensor(us_sensor[count] -> ss, temp_ss, port_ss);
				int2arrus_sensor(us_sensor[count] -> en, temp_en, port_en);

            }
            return 0;
        }