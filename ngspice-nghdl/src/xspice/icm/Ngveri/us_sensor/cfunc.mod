/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

                
        #include <stdio.h>
        #include <math.h>
        #include <string.h>
        #include "sim_main_us_sensor.h"

        
void cm_us_sensor(ARGS) 
{
	Digital_State_t *_op_atrigger, *_op_atrigger_old;
	Digital_State_t *_op_ss, *_op_ss_old;
	Digital_State_t *_op_en, *_op_en_old;

    static int inst_count=0;
    int count=0;
        
    if(INIT)
    {   
        inst_count++;
        PARAM(instance_id)=inst_count;
        foous_sensor(0,inst_count);
        /* Allocate storage for output ports and set the load for input ports */

        
        port_clk=PORT_SIZE(clk);

        port_echo=PORT_SIZE(echo);

        port_atrigger=PORT_SIZE(atrigger);

        port_ss=PORT_SIZE(ss);

        port_en=PORT_SIZE(en);
		cm_event_alloc(0,1*sizeof(Digital_State_t));
		cm_event_alloc(1,8*sizeof(Digital_State_t));
		cm_event_alloc(2,3*sizeof(Digital_State_t));
		/* set the load for input ports. */
		int Ii;
		for(Ii=0;Ii<PORT_SIZE(clk);Ii++)
		{
			LOAD(clk[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(echo);Ii++)
		{
			LOAD(echo[Ii])=PARAM(input_load); 
		}

		/*Retrieve Storage for output*/
		_op_atrigger = _op_atrigger_old = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_ss = _op_ss_old = (Digital_State_t *) cm_event_get_ptr(1,0);
		_op_en = _op_en_old = (Digital_State_t *) cm_event_get_ptr(2,0);


	}
	else
	{
		_op_atrigger = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_atrigger_old = (Digital_State_t *) cm_event_get_ptr(0,1);
		_op_ss = (Digital_State_t *) cm_event_get_ptr(1,1);
		_op_ss_old = (Digital_State_t *) cm_event_get_ptr(1,2);
		_op_en = (Digital_State_t *) cm_event_get_ptr(2,2);
		_op_en_old = (Digital_State_t *) cm_event_get_ptr(2,3);
	}

	//Formating data for sending it to client
	int Ii;
	count=(int)PARAM(instance_id);

    for(Ii=0;Ii<PORT_SIZE(clk);Ii++)
    {
        if( INPUT_STATE(clk[Ii])==ZERO )
        {
            temp_clk[Ii]=0;            }
        else
        {
            temp_clk[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(echo);Ii++)
    {
        if( INPUT_STATE(echo[Ii])==ZERO )
        {
            temp_echo[Ii]=0;            }
        else
        {
            temp_echo[Ii]=1;
        }
            }
	foous_sensor(1,count);

	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(atrigger);Ii++)
    {
        if(temp_atrigger[Ii]==0)
        {
            _op_atrigger[Ii]=ZERO;
            }
        else if(temp_atrigger[Ii]==1)
        {
            _op_atrigger[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(atrigger[Ii]) = _op_atrigger[Ii];
            }
        else if(_op_atrigger[Ii] != _op_atrigger_old[Ii])
        {
            OUTPUT_STATE(atrigger[Ii]) = _op_atrigger[Ii];
            OUTPUT_DELAY(atrigger[Ii]) = ((_op_atrigger[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(atrigger[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(atrigger[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(ss);Ii++)
    {
        if(temp_ss[Ii]==0)
        {
            _op_ss[Ii]=ZERO;
            }
        else if(temp_ss[Ii]==1)
        {
            _op_ss[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(ss[Ii]) = _op_ss[Ii];
            }
        else if(_op_ss[Ii] != _op_ss_old[Ii])
        {
            OUTPUT_STATE(ss[Ii]) = _op_ss[Ii];
            OUTPUT_DELAY(ss[Ii]) = ((_op_ss[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(ss[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(ss[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(en);Ii++)
    {
        if(temp_en[Ii]==0)
        {
            _op_en[Ii]=ZERO;
            }
        else if(temp_en[Ii]==1)
        {
            _op_en[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(en[Ii]) = _op_en[Ii];
            }
        else if(_op_en[Ii] != _op_en_old[Ii])
        {
            OUTPUT_STATE(en[Ii]) = _op_en[Ii];
            OUTPUT_DELAY(en[Ii]) = ((_op_en[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(en[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(en[Ii]) = STRONG;
    }

}