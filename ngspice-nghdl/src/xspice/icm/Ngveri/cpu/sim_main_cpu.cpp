/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vcpu.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_clkin[1024];
        extern "C" int port_clkin;
        extern "C" int temp_OutPut[1024];
        extern "C" int port_OutPut;
        extern "C" int temp_LED1[1024];
        extern "C" int port_LED1;
        extern "C" int temp_LED2[1024];
        extern "C" int port_LED2;
        extern "C" int foocpu(int,int);
        
        void int2arrcpu(int  num, int array[], int n)
        {   
            for (int i = 0; i < n && num>=0; i++) 
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intcpu(int array[],int n)
        {   
            int i,k=0;
            for (i = 0; i < n; i++) 
                k = 2 * k + array[i];
            return k;
        }
        
        int foocpu(int init,int count) 
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vcpu* cpu[1024];
            count--;
            if (init==0) 
            {
                cpu[count]=new Vcpu{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============cpu : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("clkin=%d\n", cpu[count] ->clkin);
				printf("OutPut=%d\n", cpu[count] ->OutPut);
				printf("LED1=%d\n", cpu[count] ->LED1);
				printf("LED2=%d\n", cpu[count] ->LED2);
				cpu[count]->clkin = arr2intcpu(temp_clkin, port_clkin);
				cpu[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("clkin=%d\n", cpu[count] ->clkin);
				printf("OutPut=%d\n", cpu[count] ->OutPut);
				printf("LED1=%d\n", cpu[count] ->LED1);
				printf("LED2=%d\n", cpu[count] ->LED2);
				int2arrcpu(cpu[count] -> OutPut, temp_OutPut, port_OutPut);
				int2arrcpu(cpu[count] -> LED1, temp_LED1, port_LED1);
				int2arrcpu(cpu[count] -> LED2, temp_LED2, port_LED2);

            }
            return 0;
        }