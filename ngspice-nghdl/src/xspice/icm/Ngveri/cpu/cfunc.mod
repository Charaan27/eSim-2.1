/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

                
        #include <stdio.h>
        #include <math.h>
        #include <string.h>
        #include "sim_main_cpu.h"

        
void cm_cpu(ARGS) 
{
	Digital_State_t *_op_OutPut, *_op_OutPut_old;
	Digital_State_t *_op_LED1, *_op_LED1_old;
	Digital_State_t *_op_LED2, *_op_LED2_old;

    static int inst_count=0;
    int count=0;
        
    if(INIT)
    {   
        inst_count++;
        PARAM(instance_id)=inst_count;
        foocpu(0,inst_count);
        /* Allocate storage for output ports and set the load for input ports */

        
        port_clkin=PORT_SIZE(clkin);

        port_OutPut=PORT_SIZE(OutPut);

        port_LED1=PORT_SIZE(LED1);

        port_LED2=PORT_SIZE(LED2);
		cm_event_alloc(0,8*sizeof(Digital_State_t));
		cm_event_alloc(1,7*sizeof(Digital_State_t));
		cm_event_alloc(2,7*sizeof(Digital_State_t));
		/* set the load for input ports. */
		int Ii;
		for(Ii=0;Ii<PORT_SIZE(clkin);Ii++)
		{
			LOAD(clkin[Ii])=PARAM(input_load); 
		}

		/*Retrieve Storage for output*/
		_op_OutPut = _op_OutPut_old = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_LED1 = _op_LED1_old = (Digital_State_t *) cm_event_get_ptr(1,0);
		_op_LED2 = _op_LED2_old = (Digital_State_t *) cm_event_get_ptr(2,0);


	}
	else
	{
		_op_OutPut = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_OutPut_old = (Digital_State_t *) cm_event_get_ptr(0,1);
		_op_LED1 = (Digital_State_t *) cm_event_get_ptr(1,1);
		_op_LED1_old = (Digital_State_t *) cm_event_get_ptr(1,2);
		_op_LED2 = (Digital_State_t *) cm_event_get_ptr(2,2);
		_op_LED2_old = (Digital_State_t *) cm_event_get_ptr(2,3);
	}

	//Formating data for sending it to client
	int Ii;
	count=(int)PARAM(instance_id);

    for(Ii=0;Ii<PORT_SIZE(clkin);Ii++)
    {
        if( INPUT_STATE(clkin[Ii])==ZERO )
        {
            temp_clkin[Ii]=0;            }
        else
        {
            temp_clkin[Ii]=1;
        }
            }
	foocpu(1,count);

	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(OutPut);Ii++)
    {
        if(temp_OutPut[Ii]==0)
        {
            _op_OutPut[Ii]=ZERO;
            }
        else if(temp_OutPut[Ii]==1)
        {
            _op_OutPut[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(OutPut[Ii]) = _op_OutPut[Ii];
            }
        else if(_op_OutPut[Ii] != _op_OutPut_old[Ii])
        {
            OUTPUT_STATE(OutPut[Ii]) = _op_OutPut[Ii];
            OUTPUT_DELAY(OutPut[Ii]) = ((_op_OutPut[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(OutPut[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(OutPut[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(LED1);Ii++)
    {
        if(temp_LED1[Ii]==0)
        {
            _op_LED1[Ii]=ZERO;
            }
        else if(temp_LED1[Ii]==1)
        {
            _op_LED1[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(LED1[Ii]) = _op_LED1[Ii];
            }
        else if(_op_LED1[Ii] != _op_LED1_old[Ii])
        {
            OUTPUT_STATE(LED1[Ii]) = _op_LED1[Ii];
            OUTPUT_DELAY(LED1[Ii]) = ((_op_LED1[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(LED1[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(LED1[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(LED2);Ii++)
    {
        if(temp_LED2[Ii]==0)
        {
            _op_LED2[Ii]=ZERO;
            }
        else if(temp_LED2[Ii]==1)
        {
            _op_LED2[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(LED2[Ii]) = _op_LED2[Ii];
            }
        else if(_op_LED2[Ii] != _op_LED2_old[Ii])
        {
            OUTPUT_STATE(LED2[Ii]) = _op_LED2[Ii];
            OUTPUT_DELAY(LED2[Ii]) = ((_op_LED2[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(LED2[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(LED2[Ii]) = STRONG;
    }

}