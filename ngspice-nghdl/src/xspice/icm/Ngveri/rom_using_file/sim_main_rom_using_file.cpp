/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vrom_using_file.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_address[1024];
        extern "C" int port_address;
        extern "C" int temp_read_en[1024];
        extern "C" int port_read_en;
        extern "C" int temp_ce[1024];
        extern "C" int port_ce;
        extern "C" int temp_data[1024];
        extern "C" int port_data;
        extern "C" int foorom_using_file(int,int);
        
        void int2arrrom_using_file(int  num, int array[], int n)
        {   
            for (int i = 0; i < n && num>=0; i++) 
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2introm_using_file(int array[],int n)
        {   
            int i,k=0;
            for (i = 0; i < n; i++) 
                k = 2 * k + array[i];
            return k;
        }
        
        int foorom_using_file(int init,int count) 
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vrom_using_file* rom_using_file[1024];
            count--;
            if (init==0) 
            {
                rom_using_file[count]=new Vrom_using_file{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============rom_using_file : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("address=%d\n", rom_using_file[count] ->address);
				printf("read_en=%d\n", rom_using_file[count] ->read_en);
				printf("ce=%d\n", rom_using_file[count] ->ce);
				printf("data=%d\n", rom_using_file[count] ->data);
				rom_using_file[count]->address = arr2introm_using_file(temp_address, port_address);
				rom_using_file[count]->read_en = arr2introm_using_file(temp_read_en, port_read_en);
				rom_using_file[count]->ce = arr2introm_using_file(temp_ce, port_ce);
				rom_using_file[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("address=%d\n", rom_using_file[count] ->address);
				printf("read_en=%d\n", rom_using_file[count] ->read_en);
				printf("ce=%d\n", rom_using_file[count] ->ce);
				printf("data=%d\n", rom_using_file[count] ->data);
				int2arrrom_using_file(rom_using_file[count] -> data, temp_data, port_data);

            }
            return 0;
        }