/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vcache.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_address[1024];
        extern "C" int port_address;
        extern "C" int temp_set[1024];
        extern "C" int port_set;
        extern "C" int temp_tag[1024];
        extern "C" int port_tag;
        extern "C" int temp_offset[1024];
        extern "C" int port_offset;
        extern "C" int temp_index[1024];
        extern "C" int port_index;
        extern "C" int temp_selection_signal[1024];
        extern "C" int port_selection_signal;
        extern "C" int temp_clk[1024];
        extern "C" int port_clk;
        extern "C" int temp_reset[1024];
        extern "C" int port_reset;
        extern "C" int temp_data_in[1024];
        extern "C" int port_data_in;
        extern "C" int temp_write[1024];
        extern "C" int port_write;
        extern "C" int temp_out[1024];
        extern "C" int port_out;
        extern "C" int temp_hit[1024];
        extern "C" int port_hit;
        extern "C" int temp_miss[1024];
        extern "C" int port_miss;
        extern "C" int foocache(int,int);
        
        void int2arrcache(int  num, int array[], int n)
        {   
            for (int i = 0; i < n && num>=0; i++) 
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intcache(int array[],int n)
        {   
            int i,k=0;
            for (i = 0; i < n; i++) 
                k = 2 * k + array[i];
            return k;
        }
        
        int foocache(int init,int count) 
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vcache* cache[1024];
            count--;
            if (init==0) 
            {
                cache[count]=new Vcache{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============cache : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("address=%d\n", cache[count] ->address);
				printf("set=%d\n", cache[count] ->set);
				printf("tag=%d\n", cache[count] ->tag);
				printf("offset=%d\n", cache[count] ->offset);
				printf("index=%d\n", cache[count] ->index);
				printf("selection_signal=%d\n", cache[count] ->selection_signal);
				printf("clk=%d\n", cache[count] ->clk);
				printf("reset=%d\n", cache[count] ->reset);
				printf("data_in=%d\n", cache[count] ->data_in);
				printf("write=%d\n", cache[count] ->write);
				printf("out=%d\n", cache[count] ->out);
				printf("hit=%d\n", cache[count] ->hit);
				printf("miss=%d\n", cache[count] ->miss);
				cache[count]->address = arr2intcache(temp_address, port_address);
				cache[count]->set = arr2intcache(temp_set, port_set);
				cache[count]->tag = arr2intcache(temp_tag, port_tag);
				cache[count]->offset = arr2intcache(temp_offset, port_offset);
				cache[count]->index = arr2intcache(temp_index, port_index);
				cache[count]->selection_signal = arr2intcache(temp_selection_signal, port_selection_signal);
				cache[count]->clk = arr2intcache(temp_clk, port_clk);
				cache[count]->reset = arr2intcache(temp_reset, port_reset);
				cache[count]->data_in = arr2intcache(temp_data_in, port_data_in);
				cache[count]->write = arr2intcache(temp_write, port_write);
				cache[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("address=%d\n", cache[count] ->address);
				printf("set=%d\n", cache[count] ->set);
				printf("tag=%d\n", cache[count] ->tag);
				printf("offset=%d\n", cache[count] ->offset);
				printf("index=%d\n", cache[count] ->index);
				printf("selection_signal=%d\n", cache[count] ->selection_signal);
				printf("clk=%d\n", cache[count] ->clk);
				printf("reset=%d\n", cache[count] ->reset);
				printf("data_in=%d\n", cache[count] ->data_in);
				printf("write=%d\n", cache[count] ->write);
				printf("out=%d\n", cache[count] ->out);
				printf("hit=%d\n", cache[count] ->hit);
				printf("miss=%d\n", cache[count] ->miss);
				int2arrcache(cache[count] -> out, temp_out, port_out);
				int2arrcache(cache[count] -> hit, temp_hit, port_hit);
				int2arrcache(cache[count] -> miss, temp_miss, port_miss);

            }
            return 0;
        }