/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

                
        #include <stdio.h>
        #include <math.h>
        #include <string.h>
        #include "sim_main_fifo.h"

        
void cm_fifo(ARGS) 
{
	Digital_State_t *_op_dataout, *_op_dataout_old;
	Digital_State_t *_op_fifo_full, *_op_fifo_full_old;
	Digital_State_t *_op_fifo_empty, *_op_fifo_empty_old;
	Digital_State_t *_op_fifo_threshold, *_op_fifo_threshold_old;
	Digital_State_t *_op_fifo_overflow, *_op_fifo_overflow_old;
	Digital_State_t *_op_fifo_underflow, *_op_fifo_underflow_old;

    static int inst_count=0;
    int count=0;
        
    if(INIT)
    {   
        inst_count++;
        PARAM(instance_id)=inst_count;
        foofifo(0,inst_count);
        /* Allocate storage for output ports and set the load for input ports */

        
        port_clk=PORT_SIZE(clk);

        port_reset=PORT_SIZE(reset);

        port_rd_en=PORT_SIZE(rd_en);

        port_wr_en=PORT_SIZE(wr_en);

        port_datain=PORT_SIZE(datain);

        port_dataout=PORT_SIZE(dataout);

        port_fifo_full=PORT_SIZE(fifo_full);

        port_fifo_empty=PORT_SIZE(fifo_empty);

        port_fifo_threshold=PORT_SIZE(fifo_threshold);

        port_fifo_overflow=PORT_SIZE(fifo_overflow);

        port_fifo_underflow=PORT_SIZE(fifo_underflow);
		cm_event_alloc(0,4*sizeof(Digital_State_t));
		cm_event_alloc(1,1*sizeof(Digital_State_t));
		cm_event_alloc(2,1*sizeof(Digital_State_t));
		cm_event_alloc(3,1*sizeof(Digital_State_t));
		cm_event_alloc(4,1*sizeof(Digital_State_t));
		cm_event_alloc(5,1*sizeof(Digital_State_t));
		/* set the load for input ports. */
		int Ii;
		for(Ii=0;Ii<PORT_SIZE(clk);Ii++)
		{
			LOAD(clk[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(reset);Ii++)
		{
			LOAD(reset[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(rd_en);Ii++)
		{
			LOAD(rd_en[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(wr_en);Ii++)
		{
			LOAD(wr_en[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(datain);Ii++)
		{
			LOAD(datain[Ii])=PARAM(input_load); 
		}

		/*Retrieve Storage for output*/
		_op_dataout = _op_dataout_old = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_fifo_full = _op_fifo_full_old = (Digital_State_t *) cm_event_get_ptr(1,0);
		_op_fifo_empty = _op_fifo_empty_old = (Digital_State_t *) cm_event_get_ptr(2,0);
		_op_fifo_threshold = _op_fifo_threshold_old = (Digital_State_t *) cm_event_get_ptr(3,0);
		_op_fifo_overflow = _op_fifo_overflow_old = (Digital_State_t *) cm_event_get_ptr(4,0);
		_op_fifo_underflow = _op_fifo_underflow_old = (Digital_State_t *) cm_event_get_ptr(5,0);


	}
	else
	{
		_op_dataout = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_dataout_old = (Digital_State_t *) cm_event_get_ptr(0,1);
		_op_fifo_full = (Digital_State_t *) cm_event_get_ptr(1,1);
		_op_fifo_full_old = (Digital_State_t *) cm_event_get_ptr(1,2);
		_op_fifo_empty = (Digital_State_t *) cm_event_get_ptr(2,2);
		_op_fifo_empty_old = (Digital_State_t *) cm_event_get_ptr(2,3);
		_op_fifo_threshold = (Digital_State_t *) cm_event_get_ptr(3,3);
		_op_fifo_threshold_old = (Digital_State_t *) cm_event_get_ptr(3,4);
		_op_fifo_overflow = (Digital_State_t *) cm_event_get_ptr(4,4);
		_op_fifo_overflow_old = (Digital_State_t *) cm_event_get_ptr(4,5);
		_op_fifo_underflow = (Digital_State_t *) cm_event_get_ptr(5,5);
		_op_fifo_underflow_old = (Digital_State_t *) cm_event_get_ptr(5,6);
	}

	//Formating data for sending it to client
	int Ii;
	count=(int)PARAM(instance_id);

    for(Ii=0;Ii<PORT_SIZE(clk);Ii++)
    {
        if( INPUT_STATE(clk[Ii])==ZERO )
        {
            temp_clk[Ii]=0;            }
        else
        {
            temp_clk[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(reset);Ii++)
    {
        if( INPUT_STATE(reset[Ii])==ZERO )
        {
            temp_reset[Ii]=0;            }
        else
        {
            temp_reset[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(rd_en);Ii++)
    {
        if( INPUT_STATE(rd_en[Ii])==ZERO )
        {
            temp_rd_en[Ii]=0;            }
        else
        {
            temp_rd_en[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(wr_en);Ii++)
    {
        if( INPUT_STATE(wr_en[Ii])==ZERO )
        {
            temp_wr_en[Ii]=0;            }
        else
        {
            temp_wr_en[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(datain);Ii++)
    {
        if( INPUT_STATE(datain[Ii])==ZERO )
        {
            temp_datain[Ii]=0;            }
        else
        {
            temp_datain[Ii]=1;
        }
            }
	foofifo(1,count);

	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(dataout);Ii++)
    {
        if(temp_dataout[Ii]==0)
        {
            _op_dataout[Ii]=ZERO;
            }
        else if(temp_dataout[Ii]==1)
        {
            _op_dataout[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(dataout[Ii]) = _op_dataout[Ii];
            }
        else if(_op_dataout[Ii] != _op_dataout_old[Ii])
        {
            OUTPUT_STATE(dataout[Ii]) = _op_dataout[Ii];
            OUTPUT_DELAY(dataout[Ii]) = ((_op_dataout[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(dataout[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(dataout[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(fifo_full);Ii++)
    {
        if(temp_fifo_full[Ii]==0)
        {
            _op_fifo_full[Ii]=ZERO;
            }
        else if(temp_fifo_full[Ii]==1)
        {
            _op_fifo_full[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(fifo_full[Ii]) = _op_fifo_full[Ii];
            }
        else if(_op_fifo_full[Ii] != _op_fifo_full_old[Ii])
        {
            OUTPUT_STATE(fifo_full[Ii]) = _op_fifo_full[Ii];
            OUTPUT_DELAY(fifo_full[Ii]) = ((_op_fifo_full[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(fifo_full[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(fifo_full[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(fifo_empty);Ii++)
    {
        if(temp_fifo_empty[Ii]==0)
        {
            _op_fifo_empty[Ii]=ZERO;
            }
        else if(temp_fifo_empty[Ii]==1)
        {
            _op_fifo_empty[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(fifo_empty[Ii]) = _op_fifo_empty[Ii];
            }
        else if(_op_fifo_empty[Ii] != _op_fifo_empty_old[Ii])
        {
            OUTPUT_STATE(fifo_empty[Ii]) = _op_fifo_empty[Ii];
            OUTPUT_DELAY(fifo_empty[Ii]) = ((_op_fifo_empty[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(fifo_empty[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(fifo_empty[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(fifo_threshold);Ii++)
    {
        if(temp_fifo_threshold[Ii]==0)
        {
            _op_fifo_threshold[Ii]=ZERO;
            }
        else if(temp_fifo_threshold[Ii]==1)
        {
            _op_fifo_threshold[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(fifo_threshold[Ii]) = _op_fifo_threshold[Ii];
            }
        else if(_op_fifo_threshold[Ii] != _op_fifo_threshold_old[Ii])
        {
            OUTPUT_STATE(fifo_threshold[Ii]) = _op_fifo_threshold[Ii];
            OUTPUT_DELAY(fifo_threshold[Ii]) = ((_op_fifo_threshold[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(fifo_threshold[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(fifo_threshold[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(fifo_overflow);Ii++)
    {
        if(temp_fifo_overflow[Ii]==0)
        {
            _op_fifo_overflow[Ii]=ZERO;
            }
        else if(temp_fifo_overflow[Ii]==1)
        {
            _op_fifo_overflow[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(fifo_overflow[Ii]) = _op_fifo_overflow[Ii];
            }
        else if(_op_fifo_overflow[Ii] != _op_fifo_overflow_old[Ii])
        {
            OUTPUT_STATE(fifo_overflow[Ii]) = _op_fifo_overflow[Ii];
            OUTPUT_DELAY(fifo_overflow[Ii]) = ((_op_fifo_overflow[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(fifo_overflow[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(fifo_overflow[Ii]) = STRONG;
    }
	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(fifo_underflow);Ii++)
    {
        if(temp_fifo_underflow[Ii]==0)
        {
            _op_fifo_underflow[Ii]=ZERO;
            }
        else if(temp_fifo_underflow[Ii]==1)
        {
            _op_fifo_underflow[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(fifo_underflow[Ii]) = _op_fifo_underflow[Ii];
            }
        else if(_op_fifo_underflow[Ii] != _op_fifo_underflow_old[Ii])
        {
            OUTPUT_STATE(fifo_underflow[Ii]) = _op_fifo_underflow[Ii];
            OUTPUT_DELAY(fifo_underflow[Ii]) = ((_op_fifo_underflow[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(fifo_underflow[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(fifo_underflow[Ii]) = STRONG;
    }

}