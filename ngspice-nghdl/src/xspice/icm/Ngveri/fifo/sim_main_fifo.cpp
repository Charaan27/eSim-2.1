/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vfifo.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_clk[1024];
        extern "C" int port_clk;
        extern "C" int temp_reset[1024];
        extern "C" int port_reset;
        extern "C" int temp_rd_en[1024];
        extern "C" int port_rd_en;
        extern "C" int temp_wr_en[1024];
        extern "C" int port_wr_en;
        extern "C" int temp_datain[1024];
        extern "C" int port_datain;
        extern "C" int temp_dataout[1024];
        extern "C" int port_dataout;
        extern "C" int temp_fifo_full[1024];
        extern "C" int port_fifo_full;
        extern "C" int temp_fifo_empty[1024];
        extern "C" int port_fifo_empty;
        extern "C" int temp_fifo_threshold[1024];
        extern "C" int port_fifo_threshold;
        extern "C" int temp_fifo_overflow[1024];
        extern "C" int port_fifo_overflow;
        extern "C" int temp_fifo_underflow[1024];
        extern "C" int port_fifo_underflow;
        extern "C" int foofifo(int,int);
        
        void int2arrfifo(int  num, int array[], int n)
        {   
            for (int i = 0; i < n && num>=0; i++) 
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intfifo(int array[],int n)
        {   
            int i,k=0;
            for (i = 0; i < n; i++) 
                k = 2 * k + array[i];
            return k;
        }
        
        int foofifo(int init,int count) 
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vfifo* fifo[1024];
            count--;
            if (init==0) 
            {
                fifo[count]=new Vfifo{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============fifo : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("clk=%d\n", fifo[count] ->clk);
				printf("reset=%d\n", fifo[count] ->reset);
				printf("rd_en=%d\n", fifo[count] ->rd_en);
				printf("wr_en=%d\n", fifo[count] ->wr_en);
				printf("datain=%d\n", fifo[count] ->datain);
				printf("dataout=%d\n", fifo[count] ->dataout);
				printf("fifo_full=%d\n", fifo[count] ->fifo_full);
				printf("fifo_empty=%d\n", fifo[count] ->fifo_empty);
				printf("fifo_threshold=%d\n", fifo[count] ->fifo_threshold);
				printf("fifo_overflow=%d\n", fifo[count] ->fifo_overflow);
				printf("fifo_underflow=%d\n", fifo[count] ->fifo_underflow);
				fifo[count]->clk = arr2intfifo(temp_clk, port_clk);
				fifo[count]->reset = arr2intfifo(temp_reset, port_reset);
				fifo[count]->rd_en = arr2intfifo(temp_rd_en, port_rd_en);
				fifo[count]->wr_en = arr2intfifo(temp_wr_en, port_wr_en);
				fifo[count]->datain = arr2intfifo(temp_datain, port_datain);
				fifo[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("clk=%d\n", fifo[count] ->clk);
				printf("reset=%d\n", fifo[count] ->reset);
				printf("rd_en=%d\n", fifo[count] ->rd_en);
				printf("wr_en=%d\n", fifo[count] ->wr_en);
				printf("datain=%d\n", fifo[count] ->datain);
				printf("dataout=%d\n", fifo[count] ->dataout);
				printf("fifo_full=%d\n", fifo[count] ->fifo_full);
				printf("fifo_empty=%d\n", fifo[count] ->fifo_empty);
				printf("fifo_threshold=%d\n", fifo[count] ->fifo_threshold);
				printf("fifo_overflow=%d\n", fifo[count] ->fifo_overflow);
				printf("fifo_underflow=%d\n", fifo[count] ->fifo_underflow);
				int2arrfifo(fifo[count] -> dataout, temp_dataout, port_dataout);
				int2arrfifo(fifo[count] -> fifo_full, temp_fifo_full, port_fifo_full);
				int2arrfifo(fifo[count] -> fifo_empty, temp_fifo_empty, port_fifo_empty);
				int2arrfifo(fifo[count] -> fifo_threshold, temp_fifo_threshold, port_fifo_threshold);
				int2arrfifo(fifo[count] -> fifo_overflow, temp_fifo_overflow, port_fifo_overflow);
				int2arrfifo(fifo[count] -> fifo_underflow, temp_fifo_underflow, port_fifo_underflow);

            }
            return 0;
        }