/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vuart.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_reset[1024];
        extern "C" int port_reset;
        extern "C" int temp_txclk[1024];
        extern "C" int port_txclk;
        extern "C" int temp_ld_tx_data[1024];
        extern "C" int port_ld_tx_data;
        extern "C" int temp_tx_data[1024];
        extern "C" int port_tx_data;
        extern "C" int temp_tx_enable[1024];
        extern "C" int port_tx_enable;
        extern "C" int temp_rxclk[1024];
        extern "C" int port_rxclk;
        extern "C" int temp_uld_rx_data[1024];
        extern "C" int port_uld_rx_data;
        extern "C" int temp_rx_enable[1024];
        extern "C" int port_rx_enable;
        extern "C" int temp_rx_in[1024];
        extern "C" int port_rx_in;
        extern "C" int temp_tx_out[1024];
        extern "C" int port_tx_out;
        extern "C" int temp_tx_empty[1024];
        extern "C" int port_tx_empty;
        extern "C" int temp_rx_data[1024];
        extern "C" int port_rx_data;
        extern "C" int temp_rx_empty[1024];
        extern "C" int port_rx_empty;
        extern "C" int foouart(int,int);
        
        void int2arruart(int  num, int array[], int n)
        {   
            for (int i = 0; i < n && num>=0; i++) 
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intuart(int array[],int n)
        {   
            int i,k=0;
            for (i = 0; i < n; i++) 
                k = 2 * k + array[i];
            return k;
        }
        
        int foouart(int init,int count) 
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vuart* uart[1024];
            count--;
            if (init==0) 
            {
                uart[count]=new Vuart{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============uart : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("reset=%d\n", uart[count] ->reset);
				printf("txclk=%d\n", uart[count] ->txclk);
				printf("ld_tx_data=%d\n", uart[count] ->ld_tx_data);
				printf("tx_data=%d\n", uart[count] ->tx_data);
				printf("tx_enable=%d\n", uart[count] ->tx_enable);
				printf("rxclk=%d\n", uart[count] ->rxclk);
				printf("uld_rx_data=%d\n", uart[count] ->uld_rx_data);
				printf("rx_enable=%d\n", uart[count] ->rx_enable);
				printf("rx_in=%d\n", uart[count] ->rx_in);
				printf("tx_out=%d\n", uart[count] ->tx_out);
				printf("tx_empty=%d\n", uart[count] ->tx_empty);
				printf("rx_data=%d\n", uart[count] ->rx_data);
				printf("rx_empty=%d\n", uart[count] ->rx_empty);
				uart[count]->reset = arr2intuart(temp_reset, port_reset);
				uart[count]->txclk = arr2intuart(temp_txclk, port_txclk);
				uart[count]->ld_tx_data = arr2intuart(temp_ld_tx_data, port_ld_tx_data);
				uart[count]->tx_data = arr2intuart(temp_tx_data, port_tx_data);
				uart[count]->tx_enable = arr2intuart(temp_tx_enable, port_tx_enable);
				uart[count]->rxclk = arr2intuart(temp_rxclk, port_rxclk);
				uart[count]->uld_rx_data = arr2intuart(temp_uld_rx_data, port_uld_rx_data);
				uart[count]->rx_enable = arr2intuart(temp_rx_enable, port_rx_enable);
				uart[count]->rx_in = arr2intuart(temp_rx_in, port_rx_in);
				uart[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("reset=%d\n", uart[count] ->reset);
				printf("txclk=%d\n", uart[count] ->txclk);
				printf("ld_tx_data=%d\n", uart[count] ->ld_tx_data);
				printf("tx_data=%d\n", uart[count] ->tx_data);
				printf("tx_enable=%d\n", uart[count] ->tx_enable);
				printf("rxclk=%d\n", uart[count] ->rxclk);
				printf("uld_rx_data=%d\n", uart[count] ->uld_rx_data);
				printf("rx_enable=%d\n", uart[count] ->rx_enable);
				printf("rx_in=%d\n", uart[count] ->rx_in);
				printf("tx_out=%d\n", uart[count] ->tx_out);
				printf("tx_empty=%d\n", uart[count] ->tx_empty);
				printf("rx_data=%d\n", uart[count] ->rx_data);
				printf("rx_empty=%d\n", uart[count] ->rx_empty);
				int2arruart(uart[count] -> tx_out, temp_tx_out, port_tx_out);
				int2arruart(uart[count] -> tx_empty, temp_tx_empty, port_tx_empty);
				int2arruart(uart[count] -> rx_data, temp_rx_data, port_rx_data);
				int2arruart(uart[count] -> rx_empty, temp_rx_empty, port_rx_empty);

            }
            return 0;
        }