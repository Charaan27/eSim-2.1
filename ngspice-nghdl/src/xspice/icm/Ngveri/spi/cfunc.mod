/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

                
        #include <stdio.h>
        #include <math.h>
        #include <string.h>
        #include "sim_main_spi.h"

        
void cm_spi(ARGS) 
{
	Digital_State_t *_op_out_data, *_op_out_data_old;

    static int inst_count=0;
    int count=0;
        
    if(INIT)
    {   
        inst_count++;
        PARAM(instance_id)=inst_count;
        foospi(0,inst_count);
        /* Allocate storage for output ports and set the load for input ports */

        
        port_in_data=PORT_SIZE(in_data);

        port_clk=PORT_SIZE(clk);

        port_addr=PORT_SIZE(addr);

        port_wr=PORT_SIZE(wr);

        port_rd=PORT_SIZE(rd);

        port_cs=PORT_SIZE(cs);

        port_mosi=PORT_SIZE(mosi);

        port_miso=PORT_SIZE(miso);

        port_sclk=PORT_SIZE(sclk);

        port_out_data=PORT_SIZE(out_data);
		cm_event_alloc(0,8*sizeof(Digital_State_t));
		/* set the load for input ports. */
		int Ii;
		for(Ii=0;Ii<PORT_SIZE(in_data);Ii++)
		{
			LOAD(in_data[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(clk);Ii++)
		{
			LOAD(clk[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(addr);Ii++)
		{
			LOAD(addr[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(wr);Ii++)
		{
			LOAD(wr[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(rd);Ii++)
		{
			LOAD(rd[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(cs);Ii++)
		{
			LOAD(cs[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(mosi);Ii++)
		{
			LOAD(mosi[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(miso);Ii++)
		{
			LOAD(miso[Ii])=PARAM(input_load); 
		}
		for(Ii=0;Ii<PORT_SIZE(sclk);Ii++)
		{
			LOAD(sclk[Ii])=PARAM(input_load); 
		}

		/*Retrieve Storage for output*/
		_op_out_data = _op_out_data_old = (Digital_State_t *) cm_event_get_ptr(0,0);


	}
	else
	{
		_op_out_data = (Digital_State_t *) cm_event_get_ptr(0,0);
		_op_out_data_old = (Digital_State_t *) cm_event_get_ptr(0,1);
	}

	//Formating data for sending it to client
	int Ii;
	count=(int)PARAM(instance_id);

    for(Ii=0;Ii<PORT_SIZE(in_data);Ii++)
    {
        if( INPUT_STATE(in_data[Ii])==ZERO )
        {
            temp_in_data[Ii]=0;            }
        else
        {
            temp_in_data[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(clk);Ii++)
    {
        if( INPUT_STATE(clk[Ii])==ZERO )
        {
            temp_clk[Ii]=0;            }
        else
        {
            temp_clk[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(addr);Ii++)
    {
        if( INPUT_STATE(addr[Ii])==ZERO )
        {
            temp_addr[Ii]=0;            }
        else
        {
            temp_addr[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(wr);Ii++)
    {
        if( INPUT_STATE(wr[Ii])==ZERO )
        {
            temp_wr[Ii]=0;            }
        else
        {
            temp_wr[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(rd);Ii++)
    {
        if( INPUT_STATE(rd[Ii])==ZERO )
        {
            temp_rd[Ii]=0;            }
        else
        {
            temp_rd[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(cs);Ii++)
    {
        if( INPUT_STATE(cs[Ii])==ZERO )
        {
            temp_cs[Ii]=0;            }
        else
        {
            temp_cs[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(mosi);Ii++)
    {
        if( INPUT_STATE(mosi[Ii])==ZERO )
        {
            temp_mosi[Ii]=0;            }
        else
        {
            temp_mosi[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(miso);Ii++)
    {
        if( INPUT_STATE(miso[Ii])==ZERO )
        {
            temp_miso[Ii]=0;            }
        else
        {
            temp_miso[Ii]=1;
        }
            }
    for(Ii=0;Ii<PORT_SIZE(sclk);Ii++)
    {
        if( INPUT_STATE(sclk[Ii])==ZERO )
        {
            temp_sclk[Ii]=0;            }
        else
        {
            temp_sclk[Ii]=1;
        }
            }
	foospi(1,count);

	/* Scheduling event and processing them */
    for(Ii=0;Ii<PORT_SIZE(out_data);Ii++)
    {
        if(temp_out_data[Ii]==0)
        {
            _op_out_data[Ii]=ZERO;
            }
        else if(temp_out_data[Ii]==1)
        {
            _op_out_data[Ii]=ONE;
            }
        else
        {
            printf("Unknown value\n");
                }

        if(ANALYSIS == DC)
        {
            OUTPUT_STATE(out_data[Ii]) = _op_out_data[Ii];
            }
        else if(_op_out_data[Ii] != _op_out_data_old[Ii])
        {
            OUTPUT_STATE(out_data[Ii]) = _op_out_data[Ii];
            OUTPUT_DELAY(out_data[Ii]) = ((_op_out_data[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));
            }
        else
        {
            OUTPUT_CHANGED(out_data[Ii]) = FALSE;
            }
        OUTPUT_STRENGTH(out_data[Ii]) = STRONG;
    }

}