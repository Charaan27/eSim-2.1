/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vspi.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_in_data[1024];
        extern "C" int port_in_data;
        extern "C" int temp_clk[1024];
        extern "C" int port_clk;
        extern "C" int temp_addr[1024];
        extern "C" int port_addr;
        extern "C" int temp_wr[1024];
        extern "C" int port_wr;
        extern "C" int temp_rd[1024];
        extern "C" int port_rd;
        extern "C" int temp_cs[1024];
        extern "C" int port_cs;
        extern "C" int temp_mosi[1024];
        extern "C" int port_mosi;
        extern "C" int temp_miso[1024];
        extern "C" int port_miso;
        extern "C" int temp_sclk[1024];
        extern "C" int port_sclk;
        extern "C" int temp_out_data[1024];
        extern "C" int port_out_data;
        extern "C" int foospi(int,int);
        
        void int2arrspi(int  num, int array[], int n)
        {   
            for (int i = 0; i < n && num>=0; i++) 
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intspi(int array[],int n)
        {   
            int i,k=0;
            for (i = 0; i < n; i++) 
                k = 2 * k + array[i];
            return k;
        }
        
        int foospi(int init,int count) 
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vspi* spi[1024];
            count--;
            if (init==0) 
            {
                spi[count]=new Vspi{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============spi : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("in_data=%d\n", spi[count] ->in_data);
				printf("clk=%d\n", spi[count] ->clk);
				printf("addr=%d\n", spi[count] ->addr);
				printf("wr=%d\n", spi[count] ->wr);
				printf("rd=%d\n", spi[count] ->rd);
				printf("cs=%d\n", spi[count] ->cs);
				printf("mosi=%d\n", spi[count] ->mosi);
				printf("miso=%d\n", spi[count] ->miso);
				printf("sclk=%d\n", spi[count] ->sclk);
				printf("out_data=%d\n", spi[count] ->out_data);
				spi[count]->in_data = arr2intspi(temp_in_data, port_in_data);
				spi[count]->clk = arr2intspi(temp_clk, port_clk);
				spi[count]->addr = arr2intspi(temp_addr, port_addr);
				spi[count]->wr = arr2intspi(temp_wr, port_wr);
				spi[count]->rd = arr2intspi(temp_rd, port_rd);
				spi[count]->cs = arr2intspi(temp_cs, port_cs);
				spi[count]->mosi = arr2intspi(temp_mosi, port_mosi);
				spi[count]->miso = arr2intspi(temp_miso, port_miso);
				spi[count]->sclk = arr2intspi(temp_sclk, port_sclk);
				spi[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("in_data=%d\n", spi[count] ->in_data);
				printf("clk=%d\n", spi[count] ->clk);
				printf("addr=%d\n", spi[count] ->addr);
				printf("wr=%d\n", spi[count] ->wr);
				printf("rd=%d\n", spi[count] ->rd);
				printf("cs=%d\n", spi[count] ->cs);
				printf("mosi=%d\n", spi[count] ->mosi);
				printf("miso=%d\n", spi[count] ->miso);
				printf("sclk=%d\n", spi[count] ->sclk);
				printf("out_data=%d\n", spi[count] ->out_data);
				int2arrspi(spi[count] -> out_data, temp_out_data, port_out_data);

            }
            return 0;
        }