/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vram1.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_clk[1024];
        extern "C" int port_clk;
        extern "C" int temp_reset[1024];
        extern "C" int port_reset;
        extern "C" int temp_cs[1024];
        extern "C" int port_cs;
        extern "C" int temp_read[1024];
        extern "C" int port_read;
        extern "C" int temp_write[1024];
        extern "C" int port_write;
        extern "C" int temp_datawrite[1024];
        extern "C" int port_datawrite;
        extern "C" int temp_address[1024];
        extern "C" int port_address;
        extern "C" int temp_dataread[1024];
        extern "C" int port_dataread;
        extern "C" int fooram1(int,int);
        
        void int2arrram1(int  num, int array[], int n)
        {   
            for (int i = 0; i < n && num>=0; i++) 
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intram1(int array[],int n)
        {   
            int i,k=0;
            for (i = 0; i < n; i++) 
                k = 2 * k + array[i];
            return k;
        }
        
        int fooram1(int init,int count) 
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vram1* ram1[1024];
            count--;
            if (init==0) 
            {
                ram1[count]=new Vram1{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============ram1 : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("clk=%d\n", ram1[count] ->clk);
				printf("reset=%d\n", ram1[count] ->reset);
				printf("cs=%d\n", ram1[count] ->cs);
				printf("read=%d\n", ram1[count] ->read);
				printf("write=%d\n", ram1[count] ->write);
				printf("datawrite=%d\n", ram1[count] ->datawrite);
				printf("address=%d\n", ram1[count] ->address);
				printf("dataread=%d\n", ram1[count] ->dataread);
				ram1[count]->clk = arr2intram1(temp_clk, port_clk);
				ram1[count]->reset = arr2intram1(temp_reset, port_reset);
				ram1[count]->cs = arr2intram1(temp_cs, port_cs);
				ram1[count]->read = arr2intram1(temp_read, port_read);
				ram1[count]->write = arr2intram1(temp_write, port_write);
				ram1[count]->datawrite = arr2intram1(temp_datawrite, port_datawrite);
				ram1[count]->address = arr2intram1(temp_address, port_address);
				ram1[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("clk=%d\n", ram1[count] ->clk);
				printf("reset=%d\n", ram1[count] ->reset);
				printf("cs=%d\n", ram1[count] ->cs);
				printf("read=%d\n", ram1[count] ->read);
				printf("write=%d\n", ram1[count] ->write);
				printf("datawrite=%d\n", ram1[count] ->datawrite);
				printf("address=%d\n", ram1[count] ->address);
				printf("dataread=%d\n", ram1[count] ->dataread);
				int2arrram1(ram1[count] -> dataread, temp_dataread, port_dataread);

            }
            return 0;
        }