/* This is cfunc.mod file auto generated by gen_con_info.py
        Developed by Sumanto Kar at IIT Bombay */

        
        #include <memory>
        #include <verilated.h>
        #include "Vjbasicgates.h"
        #include <stdio.h>
        #include <stdio.h>
        #include <fstream>
        #include <stdlib.h>
        #include <string>
        #include <iostream>
        #include <cstring>
        using namespace std;
        
        extern "C" int temp_a[1024];
        extern "C" int port_a;
        extern "C" int temp_b[1024];
        extern "C" int port_b;
        extern "C" int temp_yOR[1024];
        extern "C" int port_yOR;
        extern "C" int temp_yAND[1024];
        extern "C" int port_yAND;
        extern "C" int temp_yXOR[1024];
        extern "C" int port_yXOR;
        extern "C" int temp_yNOR[1024];
        extern "C" int port_yNOR;
        extern "C" int temp_yNAND[1024];
        extern "C" int port_yNAND;
        extern "C" int temp_yXNOR[1024];
        extern "C" int port_yXNOR;
        extern "C" int foojbasicgates(int,int);
        
        void int2arrjbasicgates(int  num, int array[], int n)
        {   
            for (int i = 0; i < n && num>=0; i++) 
            {
                array[n-i-1] = num % 2;
                num /= 2;
                }
        }
        int arr2intjbasicgates(int array[],int n)
        {   
            int i,k=0;
            for (i = 0; i < n; i++) 
                k = 2 * k + array[i];
            return k;
        }
        
        int foojbasicgates(int init,int count) 
        {
            static VerilatedContext* contextp = new VerilatedContext;
            static Vjbasicgates* jbasicgates[1024];
            count--;
            if (init==0) 
            {
                jbasicgates[count]=new Vjbasicgates{contextp};
                contextp->traceEverOn(true);
            }
            else
            {
                contextp->timeInc(1);
                printf("=============jbasicgates : New Iteration===========");
                printf("\nInstance : %d\n",count);
                printf("\nInside foo before eval.....\n");
				printf("a=%d\n", jbasicgates[count] ->a);
				printf("b=%d\n", jbasicgates[count] ->b);
				printf("yOR=%d\n", jbasicgates[count] ->yOR);
				printf("yAND=%d\n", jbasicgates[count] ->yAND);
				printf("yXOR=%d\n", jbasicgates[count] ->yXOR);
				printf("yNOR=%d\n", jbasicgates[count] ->yNOR);
				printf("yNAND=%d\n", jbasicgates[count] ->yNAND);
				printf("yXNOR=%d\n", jbasicgates[count] ->yXNOR);
				jbasicgates[count]->a = arr2intjbasicgates(temp_a, port_a);
				jbasicgates[count]->b = arr2intjbasicgates(temp_b, port_b);
				jbasicgates[count]->eval();

                printf("\nInside foo after eval.....\n");
				printf("a=%d\n", jbasicgates[count] ->a);
				printf("b=%d\n", jbasicgates[count] ->b);
				printf("yOR=%d\n", jbasicgates[count] ->yOR);
				printf("yAND=%d\n", jbasicgates[count] ->yAND);
				printf("yXOR=%d\n", jbasicgates[count] ->yXOR);
				printf("yNOR=%d\n", jbasicgates[count] ->yNOR);
				printf("yNAND=%d\n", jbasicgates[count] ->yNAND);
				printf("yXNOR=%d\n", jbasicgates[count] ->yXNOR);
				int2arrjbasicgates(jbasicgates[count] -> yOR, temp_yOR, port_yOR);
				int2arrjbasicgates(jbasicgates[count] -> yAND, temp_yAND, port_yAND);
				int2arrjbasicgates(jbasicgates[count] -> yXOR, temp_yXOR, port_yXOR);
				int2arrjbasicgates(jbasicgates[count] -> yNOR, temp_yNOR, port_yNOR);
				int2arrjbasicgates(jbasicgates[count] -> yNAND, temp_yNAND, port_yNAND);
				int2arrjbasicgates(jbasicgates[count] -> yXNOR, temp_yXNOR, port_yXNOR);

            }
            return 0;
        }