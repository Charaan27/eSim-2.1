import re
import os
from configparser import SafeConfigParser
fname="and2.v"
input_list=[['A', 'input', '1'], ['B', 'input', '1']]

output_list=[['Y', 'output', '1']]

home='sumanto'
input_port = []
output_port = []

# creating list of input and output port with its weight
for input in input_list:
    input_port.append(input[0]+":"+input[2])
for output in output_list:
    output_port.append(output[0]+":"+output[2])
 ############## Creating content for cfunc.mod file ############## #

print("Starting With cfunc.mod file")
cfunc = open('cfunc.mod', 'w')
print("Building content for cfunc.mod file")

comment = '''/* This is cfunc.mod file auto generated by gen_con_info.py
Developed by Sumanto Kar at IIT Bombay */\n
        '''

header = '''
#include <stdio.h>
#include <math.h>
#include <string.h>

'''


function_open = (
    '''void cm_''' + fname.split('.')[0] + '''(ARGS) \n{''')

digital_state_output = []
for item in output_port:
    digital_state_output.append(
        "Digital_State_t *_op_" + item.split(':')[0] +
        ", *_op_" + item.split(':')[0] + "_old;"
    )

var_section = '''
    // Declaring components of Client
    FILE *fpin,*fpout;
    int bytes_recieved;
    char recv_data[1024];
    char *key_iter;
'''



temp_input_var = []
for item in input_port:
    temp_input_var.append(
        "char temp_" + item.split(':')[0] + "[1024];"
    )

# Start of INIT function
init_start_function = '''
    if(INIT)
    {
        /* Allocate storage for output ports ''' \
        '''and set the load for input ports */
'''

cm_event_alloc = []
cm_count_output = 0
for item in output_port:
    cm_event_alloc.append(
        "cm_event_alloc(" +
        str(cm_count_output) + "," + item.split(':')[1] +
        "*sizeof(Digital_State_t));"
    )
    cm_count_output = cm_count_output + 1

load_in_port = []
for item in input_port:
    load_in_port.append(
        "for(Ii=0;Ii<PORT_SIZE(" + item.split(':')[0] +
        ");Ii++)\n\t\t{\n\t\t\tLOAD(" + item.split(':')[0] +
        "[Ii])=PARAM(input_load); \n\t\t}"
    )

cm_count_ptr = 0
cm_event_get_ptr = []
for item in output_port:
    cm_event_get_ptr.append(
        "_op_" + item.split(':')[0] + " = _op_" +
        item.split(':')[0] +
        "_old = (Digital_State_t *) cm_event_get_ptr(" +
        str(cm_count_ptr) + ",0);"
    )

    cm_count_ptr = cm_count_ptr + 1

els_evt_ptr = []
els_evt_count1 = 0
els_evt_count2 = 0
for item in output_port:
    els_evt_ptr.append("_op_" + item.split(":")[0] +
                       " = (Digital_State_t *) cm_event_get_ptr(" +
                       str(els_evt_count1) + "," +
                       str(els_evt_count2) + ");")
    els_evt_count2 = els_evt_count2 + 1
    els_evt_ptr.append("_op_" + item.split(":")[0] + "_old" +
                       " = (Digital_State_t *) cm_event_get_ptr(" +
                       str(els_evt_count1) + "," +
                       str(els_evt_count2) + ");")
    els_evt_count1 = els_evt_count1 + 1




# Assign bit value to every input
assign_data_to_input = []
for item in input_port:
    assign_data_to_input.append("\tfor(Ii=0;Ii<PORT_SIZE(" +
                                item.split(':')[0] + ");Ii++)\n\
\t{\n\t\tif( INPUT_STATE(" + item.split(':')[0] + "[Ii])==ZERO )\n\
\t\t{\n\t\t\ttemp_" + item.split(':')[0] + "[Ii]='0';\n\t\t}\n\
\t\telse\n\t\t{\n\t\t\ttemp_" + item.split(':')[0] + "[Ii]='1';\n\
\t\t}\n\t}\n\ttemp_" + item.split(':')[0] + "[Ii]='\\0';\n\n")

verilator_op = []
verilator_op.append('''
    fpout = fopen("read.txt","w");''')
    
for item in input_port:
    verilator_op.append(
        '''\n\tfprintf(fpout,"%s",temp_''' + item.split(':')[0] + ");"
    )

verilator_op.append('''
    fclose(fpout);
    system("/home/'''+home+'''/ngspice-nghdl/src/xspice/icm\
/Ngveri/'''+fname.split('.')[0]+'''/obj_dir/V'''+fname.split('.')[0]+'''\
");
    fpin=fopen("write.txt","r");
    fscanf(fpin,"%s", recv_data);
    fclose(fpin);
    ''')




# Scheduling output event
sch_output_event = []

for item in output_port:
    sch_output_event.append(
        "\t/* Scheduling event and processing them */\n\
\tif((key_iter=strstr(recv_data, " + '"' + item.split(':')[0] + ':"'")) != NULL)\n\
\t{\n\
\t\twhile(*key_iter++ != ':');\n\
\t\tfor(Ii=0;*key_iter != ';';Ii++,key_iter++)\n\
\t\t{\n\
\t\t\tif(*key_iter=='0')\n\t\t\t{\n\
\t\t\t\t_op_" + item.split(':')[0] + "[Ii]=ZERO;\n\t\t\t}\n\
\t\t\telse if(*key_iter=='1')\n\t\t\t{\n\
\t\t\t\t_op_" + item.split(':')[0] + "[Ii]=ONE;\n\
\t\t\t}\n\t\t\telse\n\t\t\t{\n\
\n\t\t\t\tprintf(\"Unknown value  \\n\");\n\t\t\t}\n\n\
\t\t\tif(ANALYSIS == DC)\n\t\t\t{\n\
\t\t\t\tOUTPUT_STATE(" + item.split(':')[0] + "[Ii]) = _op_" + item.split(':')[0] + "[Ii];\n\
\t\t\t}\n\t\t\telse if(_op_" + item.split(':')[0] + "[Ii] != _op_" + item.split(':')[0] + "_old[Ii])\n\
\t\t\t{\n\t\t\t\tOUTPUT_STATE(" + item.split(':')[0] + "[Ii]) = _op_" + item.split(':')[0] + "[Ii];\n\
\t\t\t\tOUTPUT_DELAY(" + item.split(':')[0] + "[Ii]) = ((_op_" + item.split(':')[0] + "[Ii] == ZERO) ? PARAM(fall_delay) : PARAM(rise_delay));\n\
\t\t\t}\n\t\t\telse\n\t\t\t{\n\
\t\t\t\tOUTPUT_CHANGED(" + item.split(':')[0] + "[Ii]) = FALSE;\n\t\t\t}\n\
\t\t\tOUTPUT_STRENGTH(" + item.split(':')[0] + "[Ii]) = STRONG;\n\
\t\t}\n\
\t}\n")

# Writing content in cfunc.mod file
cfunc.write(comment)
cfunc.write(header)
cfunc.write("\n")
cfunc.write(function_open)
cfunc.write("\n")

# Adding digital state Variable
for item in digital_state_output:
    cfunc.write("\t" + item + "\n")

# Adding variable declaration section
cfunc.write(var_section)
for item in temp_input_var:
    cfunc.write("\t" + item + "\n")
cfunc.write("\n")

# Adding INIT portion
cfunc.write(init_start_function)
for item in cm_event_alloc:
    cfunc.write(2 * "\t" + item)
    cfunc.write("\n")

cfunc.write(2 * "\t" + "/* set the load for input ports. */")
cfunc.write("\n")
cfunc.write(2 * "\t" + "int Ii;")
cfunc.write("\n")

for item in load_in_port:
    cfunc.write(2 * "\t" + item)
    cfunc.write("\n")
cfunc.write("\n")
cfunc.write(2 * "\t" + "/*Retrieve Storage for output*/")
cfunc.write("\n")
for item in cm_event_get_ptr:
    cfunc.write(2 * "\t" + item)
    cfunc.write("\n")
cfunc.write("\n")


# if os.name == 'nt':
#     digital_home = parser.get('NGSPICE', 'DIGITAL_MODEL')
#     msys_home = parser.get('COMPILER', 'MSYS_HOME')
#     cmd_str2 = "/start_server.sh %d %s & read" + "\\" + "\"" + "\""
#     cmd_str1 = os.path.normpath(
#                         "\"" + digital_home + "/" +
#                         fname.split('.')[0] + "/DUTghdl/"
#     )
#     cmd_str1 = cmd_str1.replace("\\", "/")

#     cfunc.write(
#         '\t\tsnprintf(command,1024, "start mintty.exe -t ' +
#         '\\"VHDL-Testbench Logs\\" -h always bash.exe -c ' +
#         '\\' + cmd_str1 + cmd_str2 + ', sock_port, my_ip);'
#     )
# else:
#     cfunc.write(
#         '\t\tsnprintf(command,1024,"' + home +
#         '/ngspice-nghdl/src/xspice/icm/ghdl/' +
#         fname.split('.')[0] +
#         '/DUTghdl/start_server.sh %d %s &", sock_port, my_ip);'
#     )


cfunc.write("\n\t}")
cfunc.write("\n")
cfunc.write("\telse\n\t{\n")

for item in els_evt_ptr:
    cfunc.write(2 * "\t" + item)
    cfunc.write("\n")
cfunc.write("\t}")
cfunc.write("\n\n")

cfunc.write("\t//Formating data for sending it to client\n")
cfunc.write("\tint Ii;\n\n")

for item in assign_data_to_input:
    cfunc.write(item)

for item in verilator_op:
    cfunc.write(item)
cfunc.write("\n")

for item in sch_output_event:
    cfunc.write(item)


# Close cm_ function
cfunc.write("\n}")
cfunc.close()
