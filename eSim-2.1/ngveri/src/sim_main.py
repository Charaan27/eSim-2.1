import re
import os
from configparser import SafeConfigParser
fname="and2.v"
input_list=[['A', 'input', '1'], ['B', 'input', '1']]

output_list=[['Y', 'output', '1']]
home='sumanto'
input_port = []
output_port = []

# creating list of input and output port with its weight
for input in input_list:
    input_port.append(input[0]+":"+input[2])
for output in output_list:
    output_port.append(output[0]+":"+output[2])
 ############## Creating content for cfunc.mod file ############## #

print("Starting With cfunc.mod file")
csim = open('sim_main.cpp', 'w')
print("Building content for cfunc.mod file")

comment = '''/* This is cfunc.mod file auto generated by gen_con_info.py
Developed by Sumanto Kar at IIT Bombay */\n
'''

header = '''
#include <memory>
#include <verilated.h>
#include "V'''+fname.split('.')[0]+'''.h"
#include <stdio.h>
#include <stdio.h>
#include <fstream>
#include <stdlib.h>
#include <string>
#include <iostream>
#include <cstring>
using namespace std;
'''
main_func = '''
int main(int argc, char** argv, char** env) {
    if (false && argc && argv && env) {}
'''
contextp = '''
    const std::unique_ptr<VerilatedContext> contextp{new VerilatedContext};
    contextp->traceEverOn(true);
    contextp->commandArgs(argc, argv);
    '''
unique_ptr = '''
    const std::unique_ptr<V'''+fname.split('.')[0]+'''> '''+fname.split('.')[0]+'''\
{new V'''+fname.split('.')[0]+'''{contextp.get(), "'''+fname.split('.')[0]+'''"}};
    string line;
    ifstream fpin;
    ofstream fpout;
    fpin.open("/home/'''+home+'''/ngspice-nghdl/src/xspice/icm/Ngveri/'''+fname.split('.')[0]+'''/input.txt",ios::in);
    getline(fpin,line);
    char *cstr = new char[line.length() + 1];
    strcpy(cstr, line.c_str());
    int len= strlen(cstr);
    int i=-1;
    printf("=============New Iteration===========");
    while(i<len-1)
    {
        contextp->timeInc(1);
'''
input_file=[]
output_file=[]
for i,item in enumerate(input_port):
    input_file.append("\t\t"+fname.split('.')[0]+'''->'''+item.split(':')[0]+'''=(int)line[++i]-48;\n''')
input_file.append("\t\t"+fname.split('.')[0]+"->eval();\n\t}\n");
for i,item in enumerate(input_port):
    input_file.append('''\tprintf("\\n'''+item.split(':')[0]+'''=%d",'''+fname.split('.')[0]+'''->'''+item.split(':')[0]+''');
''')
input_file.append('''
    fpin.close();
    '''+fname.split('.')[0]+'''->final();
    fpout.open("/home/'''+home+'''/ngspice-nghdl/src/xspice/icm/Ngveri/'''+fname.split('.')[0]+'''/output.txt");    
    ''')

for i,item in enumerate(output_port):   
    output_file.append('''printf("\\n'''+item.split(':')[0]+'''=%d",\
'''+fname.split('.')[0]+'''->'''+item.split(':')[0]+''');
    fpout<<("'''+item.split(':')[0]+''':");
    fpout<<(char)('''+fname.split('.')[0]+'''->'''+item.split(':')[0]+'''+48);
    fpout<<(";\\n");
    ''')

output_file.append('''
    printf("\\n");
    fpout.close();
    return 0;
}
''')
csim.write(header)
csim.write(main_func)
csim.write(contextp)
csim.write(unique_ptr)
for item in input_file:
    csim.write(item)
for item in output_file:
    csim.write(item)